<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SIP_Presence_Service_User_Guide.ent">
%BOOK_ENTITIES;]>

<section id="msps-presence_client_enabler-using">

	<title>Using the &PLATFORM_NAME; Presence Client Enabler</title>
	
	<para>In the last section we integrated the Enabler in the JAIN SLEE Service's Sbb, the Parent Sbb, in this section it is explained how to use the Enabler's Sbb, the Child Sbb.</para>
	
	<section id="msps-presence_client_enabler-the_child_sbblocalobject_interface">
		
		<title>The Child's SbbLocalObject Interface</title>
		
		<para>The &PLATFORM_NAME; Presence Client Enabler Sbb, the Child Sbb, implements the <literal>org.mobicents.slee.sippresence.client.PresenceClientControlSbbLocalObject</literal>, which extends the <literal>javax.slee.SbbLocalObject</literal> and <literal>org.mobicents.slee.sippresence.client.PresenceClientControl</literal> interfaces, the latter declares the methods which can be used to interact with the PS and/or RLS:</para>
		
		<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.slee.sippresence.client;

public interface PresenceClientControl {

	public void setParentSbb(PresenceClientControlParentSbbLocalObject parentSbb);

	public void newPublication(Object requestId, String entity,
			String document, String contentType, String contentSubType,
			int expires);

	public void refreshPublication(Object requestId, String entity,
			String eTag, int expires);

	public void modifyPublication(Object requestId, String entity, String eTag,
			String document, String contentType, String contentSubType,
			int expires);

	public void removePublication(Object requestId, String entity, String eTag);

	public void newSubscription(String subscriber,
			String subscriberdisplayName, String notifier, String eventPackage,
			String subscriptionId, int expires);

	public void refreshSubscription(String subscriber, String notifier,
			String eventPackage, String subscriptionId, int expires);

	public void removeSubscription(String subscriber, String notifier,
			String eventPackage, String subscriptionId);

}
		]]>
		</programlisting>
		
		<variablelist>
		
			<varlistentry>
				<term>The <literal>setParentSbb(PresenceClientControlParentSbbLocalObject)</literal> method:</term>
				<listitem>
					<para>Passes the Parent's SbbLocalObject, which will be used by the Child Sbb to provide async results. If not invoked after the child creation the Enabler won't be able to callback the Parent Sbb.</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>The <literal>newPublication(Object, String, String, String, String, int)</literal> method:</term>
				<listitem>
					<para>Requests a new publication, for the specified Entity. The object argument is an ID that identifies the publication, and which will be provided in the response callback.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>The <literal>refreshPublication(Object, String, String, int)</literal> method:</term>
				<listitem>
					<para>Requests a publication refresh, for the specified Entity and ETag. The object argument is an ID that identifies the publication, and which will be provided in the response callback.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>The <literal>modifyPublication(Object, String, String, String, String, String, int)</literal> method:</term>
				<listitem>
					<para>Requests a publication modification, for the specified Entity and ETag. The object argument is an ID that identifies the publication, and which will be provided in the response callback.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>The <literal>removePublicationOk(Object, String, String)</literal> method:</term>
				<listitem>
					<para>Requests a publication removal, for the specified Entity and ETag. The object argument is an ID that identifies the publication, and which will be provided in the response callback.</para>
				</listitem>
			</varlistentry>
						
			<varlistentry>
				<term>The <literal>newSubscription(String, String, String, String, String, int)</literal> method:</term>
				<listitem>
					<para>Requests a new subscription.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>The <literal>refreshSubscription(String, String, String, String, int)</literal> method:</term>
				<listitem>
					<para>Requests a subscription refresh.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>The <literal>removeSubscription(String, String, String, String)</literal> method:</term>
				<listitem>
					<para>Requests a subscription removal.</para>
				</listitem>
			</varlistentry>
			
		</variablelist>
		
	</section>
	
	<section id="msps-presence_client_enabler-creating_and_retrieving_the_child_sbb">
		<title>Creating And Retrieving The Child Sbb</title>
		<para>The Child Relation in the Parent Sbb Abstract Class is used to create and retrieve the Child Sbb, it is important to not forget to pass the Parent's SbbLocalObject to the Child after creation:</para>
		<programlisting language="Java" role="JAVA"><![CDATA[
	public PresenceClientControlSbbLocalObject getPresenceClientChildSbb() {
		final ChildRelation childRelation = getPresenceClientChildRelation();
		if (childRelation.isEmpty()) {
			try {
				// creates new instance
				PresenceClientControlSbbLocalObject sbb = (PresenceClientControlSbbLocalObject) childRelation.create();
				// passes the parent sbb local object to the child
				sbb.setParentSbb((PresenceClientControlSbbLocalObject) sbbContext.getSbbLocalObject());
				return sbb;
			} catch (Exception e) {
				tracer.severe("Failed to create child sbb", e);
				return null;
			}
		}
		else {
			// reuse the existent one
			return (PresenceClientControlSbbLocalObject) childRelation.iterator().next();
		}
	}
		]]>
		</programlisting>
		<para>The SbbLocalObject of the Child could also be stored in a CMP Field for the simplest retrieval, but unless you are going to reuse each instance several times it's better to have less state, specially in clustered environments.</para>		
	</section>		 
		
</section>

