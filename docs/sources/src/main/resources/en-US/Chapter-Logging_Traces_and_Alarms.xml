<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "SIP_Presence_Service_User_Guide.ent">
%BOOK_ENTITIES;]>

<chapter
	id="logging_traces_and_alarms">

	<title>Logging, Traces and Alarms</title>
	
	<section id="log4j_service">
		<title>Log4j Logging Service</title>
		<para>In &PLATFORM_NAME; SIP Presence <literal>Apache log4j</literal> is used for logging. If you are not familiar with the log4j package and would like to use it in your applications, you can read more about it at the <ulink url="http://jakarta.apache.org/log4j/">Jakarta web site</ulink>.</para>
    	<para>Logging is controlled from a central <filename>conf/jboss-log4j.xml</filename> file, in each server configuration profile. This file defines a set of appenders specifying the log files, what categories of messages should go there, the message format and the level of filtering. By default, in &THIS.PLATFORM; produces output to both the console and a log file (<filename>log/server.log</filename>).</para>
    	<para>There are 6 basic log levels used: TRACE, DEBUG, INFO, WARN, ERROR and FATAL. </para>
    	<para>Logging is organized in categories and appenders. Appenders control destination of log entries. Different appenders differ in configuration, however each supports threshold. Threshold filters log entries based on their level. Threshold set to WARN will allow log entry to pass into appender if its level is WARN, ERROR or FATAL, other entries will be discarded. For more details on appender configuration please refer to its documentation or java doc.</para>
    	<para>The logging threshold on the console is INFO, by default.  In contrast, there is no threshold set for the server.log file, so all generated logging messages are  logged there. </para>
    	<para> Categories control level for loggers and its children, for details please refer to log4j manual. </para>
    	<para>By default  &PLATFORM_NAME; SIP Presence inherits level of INFO from root logger. To make platform add more detailed logs, file             <filename>conf/jboss-log4j.xml</filename> has to be altered. Explicit category definition for &PLATFORM_NAME; SIP Presence looks like:</para>
		<programlisting language="XML" role="XML"><![CDATA[
<category name="org.mobicents.slee"> 
    <priority value="INFO"/> 
</category>]]>
		</programlisting>    
		<para>This limits the level of logging to INFO for all &PLATFORM_NAME; SIP Presence classes. It is possible to declare more categories with different level, to provide logs with greater detail.</para>
    	<para>For instance, to provide detailed information on &PLATFORM_NAME; SIP Presence transaction engine in separate log file(<filename>txmanager.log</filename>), file   <filename>conf/jboss-log4j.xml</filename> should contain entries as follows:</para>
		<programlisting language="XML" role="XML"><![CDATA[
<appender name="TXMANAGER" class="org.jboss.logging.appender.RollingFileAppender"> 
    <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/> 
    <param name="File" value="${jboss.server.home.dir}/log/txmanager.log"/> 
    <param name="Append" value="false"/> 
    <param name="MaxFileSize" value="500KB"/> 
    <param name="MaxBackupIndex" value="1"/> 
 
    <layout class="org.apache.log4j.PatternLayout"> 
        <param name="ConversionPattern" value="%d %-5p [%c] %m%n"/> 
    </layout> 
</appender> 
 
<category name="org.mobicents.slee.runtime.transaction"> 
    <priority value="DEBUG" /> 
    <appender-ref ref="TXMANAGER"/> 
</category>]]>
		</programlisting>    
		<para>This creates a new file appender and specifies that it should be used by the logger (or category) for the package org.mobicents.slee.runtime.transaction.</para>
		<para>The file appender is set up to produce a new log file every day rather than producing a new one every time you restart the server or writing to a single file indefinitely. The current log file is txmanager.log. Older files have the date they were written added to their filenames.</para>
		
		<section id="global_logging_config">
			<title>Simplified Global Log4j Configuration</title>
			<para>Besides manual logging configuration, described previously, &PLATFORM_NAME; SIP Presence also exposes management operations that greatly simplify such configuration, allowing the administrator to select through predefined and complete logging configuration presets. Such operations are available in MBean named <filename>org.mobicents.slee%3Aservice%3DMobicentsManagement</filename>, and the available presets are:</para>
			
			<variablelist>
				<varlistentry>
					<term>Level</term>
					<listitem>
						<itemizedlist>
							<listitem>
								<para>DEFAULT: Regular logging, at INFO level, displaying most user-related messages;</para>
							</listitem>
							<listitem>
								<para>DEBUG: More verbose logging, mostly using DEBUG/TRACE level, displaying message of interest for developers;</para>
							</listitem>
							<listitem>
								<para>PRODUCTION: Low verbosity and async logging, mostly in WARN level, for systems in production so that logging does impact performance.</para>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
			</variablelist>
			
			<para>The available management operations are:</para>
			
			<variablelist>
				<varlistentry>
					<term>JMX Operation</term>
					<listitem>
						<itemizedlist>
							<listitem>
								<para>getLoggingConfiguration: retrieves what is the current logging configuration;</para>
							</listitem>
							<listitem>
								<para>switchLoggingConfiguration: allows switching to a different configuration preset;</para>
							</listitem>
							<listitem>
								<para>setLoggingConfiguration: used to upload a complete logging configuration.</para>
							</listitem>
						</itemizedlist>
					</listitem>
				</varlistentry>
			</variablelist>
			
			<para>Custom presets can be easily deployed in the application server too. Simply name the configuration file as <filename>jboss-log4j.xml.PRESET_NAME</filename>, where <literal>PRESET_NAME</literal> should be unique preset name, and copy it to directory <filename>$JBOSS_HOME/server/profile_name/deploy/mobicents-slee/log4j-templates</filename>, where <application>profile_name</application> is the server profile name.</para>
			
			<note><para>These procedures changes the whole platform logging configuration, so it will affect also logging for other running applications besides the SIP Presence elemnts.</para></note>
			
		</section>
		
	</section>
	
	<section id="alarm_facility">
		<title>Alarms</title>
		<para>Currently &PLATFORM_NAME; SIP Presence does not uses JAIN SLEE Alarms.</para>		
	</section>
	
	<section id="trace_facility">
		<title>Trace Facility</title>
		<para>Notification sources such as SBBs, Resource Adaptors, Profiles, and SLEE internal components use the <literal>JAIN SLEE Trace Facility</literal> to generate trace messages intended for consumption by external management clients. Management clients register to receive trace messages generated by the <literal>Trace Facility</literal> through the external management interface (MBean). Filters can be applied, in a similar way as in case of Alarms.</para>
		<para>Within the SLEE, notification sources use a <literal>tracer</literal> to emit trace messages. A tracer is a named entity. Tracer names are case-sensitive and follow the Java hierarchical naming conventions. A tracer is considered to be an ancestor of another tracer if its name followed by a dot is a prefix of the descendant tracerâ€™s name. A tracer is considered to be a parent of a tracer if there are no ancestors between itself and the descendant tracer. For example, the tracer named <literal>com</literal> is the parent tracer of the tracer named <literal>com.foo</literal> and an ancestor of the tracer named <literal>com.foo.bar</literal>.</para>
		<para>All tracers are implicitly associated with a notification source, which identifies the object in the SLEE that is emitting the trace message and is included in trace notifications generated by the <literal>Trace MBean</literal> on behalf of the tracer. For instance, an SBB notification source is composed by the SBB id and the Service id.</para>
		<important>
			<para>Multiple notification sources may have tracers with same name in SLEE. Comparing with common logging frameworks, this would mean that the notification source would be part of the log category or name.</para>
		</important>
		<para>For further information on how to use <literal>JAIN SLEE Trace Facility</literal> and receive JMX notifications refer to the JAIN SLEE 1.1 Specification.</para>
		<section id="tracers_vs_log4j">
			<title>JAIN SLEE Tracers and Log4j</title>
			<para>&PLATFORM_NAME; SIP Presence Tracers additionally log messages to <application>Apache Log4j</application>, being the log4j category, for notification source <literal>X</literal>, defined as <literal>javax.slee.</literal> concatenated with the <literal>X.toString()</literal>.</para>
			<para>For instance, the full log4j logger <literal>name</literal> for tracer named <literal>GoogleTalkBotSbb</literal>, of sbb notification source with <literal>SbbID[name=GoogleTalkBotSbb,vendor=mobicents,version=1.0]</literal> and <literal>ServiceID[name=GoogleTalkBotService,vendor=mobicents,version=1.0]</literal>, would be <literal>javax.slee.SbbNotification[service=ServiceID[name=GoogleTalkBotService, vendor=mobicents,version=0.1], sbb=SbbID[name=GoogleTalkBotSbb,vendor=mobicents, version=0.1]].GoogleTalkBotSbb</literal> (without the spaces or breaks), which means a log4j category defining its level as <literal>DEBUG</literal> could be:</para>
			<programlisting language="XML" role="XML"><![CDATA[
<category
	name="javax.slee.SbbNotification[service=ServiceID[name=GoogleTalkBotService,
	vendor=mobicents,version=0.1],sbb=SbbID[name=GoogleTalkBotSbb,
	vendor=mobicents,version=0.1]]"> 
    <priority value="DEBUG" /> 
</category>]]>	
			</programlisting>	
			<para>The relation of JAIN SLEE <literal>tracers</literal> and log4j <literal>loggers</literal> goes beyond log4j showing tracer's messages, changing the tracer's log4j logger <literal>effective level</literal> changes the tracer level in SLEE, and vice-versa. Since JAIN SLEE tracer levels differ from log4j logger levels a mapping is needed:</para>
		
			<table frame="all" pgwide="1">
				<title>Mapping JAIN SLEE Tracer Levels with Apache Log4j Logger Levels</title>
				<tgroup colsep="1" cols="2">
			    	<colspec colnum="1" colname="c0"/>
				    <colspec colnum="2" colname="c1"/>
				    <thead>
						<row>
				    	    <entry>Tracer Level</entry>
			    	    	<entry>Logger Level</entry>
				    	</row>
					</thead>
					<tbody>
			      		<row>
					   		<entry>OFF</entry>
				    	    <entry>OFF</entry>
					    </row>
					    <row>
					      	<entry>SEVERE</entry>
				    	    <entry>ERROR</entry>
					    </row>
					    <row>
				    	  	<entry>WARNING</entry>
				    	    <entry>WARN</entry>
					    </row>
					    <row>
					      	<entry>INFO</entry>
			    		    <entry>INFO</entry>
					    </row>
					    <row>
				    	  	<entry>CONFIG</entry>
				    	    <entry>INFO</entry>
					    </row>
					    <row>
					      	<entry>FINE</entry>
			    		    <entry>DEBUG</entry>
					    </row>
					    <row>
					      	<entry>FINER</entry>
				    	    <entry>DEBUG</entry>
					    </row>
					    <row>
					      	<entry>FINEST</entry>
			   		 	    <entry>TRACE</entry>
					   	</row>
		    		</tbody>
			  	</tgroup>
			</table>		
		</section>
	</section>
				
</chapter>

