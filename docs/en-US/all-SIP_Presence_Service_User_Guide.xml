<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SIP_Presence_Service_User_Guide.ent">
<!ENTITY PRODUCT "JBoss Communications Platform">
<!ENTITY BOOKID "SIP_Presence_Service_User_Guide">
<!ENTITY YEAR "2009">
<!ENTITY HOLDER "Red Hat Inc">
<!-- Platform Installation Guide --><!ENTITY MOB_PLAT_ZIP "mobicents-all-1.2.0.GA-jboss-4.2.3.GA.zip">
<!ENTITY JBCP_PLAT_ZIP "JBCP-1.2.0.GA-jboss-eap-4.3.zip">
<!ENTITY JBOSS "jboss-4.2.2.GA">
<!ENTITY JBOSSAS_LIN "jboss-eap-4.3/jboss-as">
<!ENTITY JBOSSAS_WIN "jboss-eap-4.3\jboss-as">
<!-- Shared: Configuring the JBOSS_HOME Environment Variable --><!ENTITY MOB_JBOSSHOME_LIN "mobicents-all-1.2.0.GA-jboss-4.2.3.GA/jboss">
<!ENTITY JBCP_JBOSSASHOME_LIN "jboss-eap-4.3/jboss-as">
]>
<book>
	<bookinfo id="spsug-SIP_Presence_Service_User_Guide">
	<!--  chapter id nickname: spsug  --><title>SIP Presence Service User Guide</title>
	<subtitle>The Guide to the SIP Presence and XML Document Management Servers</subtitle>
	<productname>JBoss Communications Platform</productname>
	<productnumber>1.2.0</productnumber>
	<edition>1.0</edition>
	<pubsnumber>0</pubsnumber>
	<abstract>
		<para><application condition="mob">The Mobicents Platform</application> is the first and only open source <acronym>VoIP</acronym> platform certified for <acronym>JAIN SLEE</acronym> 1.0 and <acronym>SIP</acronym> Servlets 1.1 compliance. <application condition="mob">Mobicents</application> serves as a high-performance core for Service Delivery Platforms (<acronym>SDP</acronym>s) and <acronym>IP</acronym> Multimedia Subsystems (<acronym>IMS</acronym>es) by leveraging <acronym>J2EE</acronym> to enable the convergence of data and video in Next-Generation
Intelligent Network (<acronym>NGIN</acronym>) applications.</para>
			<para>The <application condition="mob">Mobicents Platform</application> enables the composition of predefined Service Building Blocks (<acronym>SBB</acronym>s) such as Call-Control, Billing, User-Provisioning, Administration
and Presence-Sensing. Out-of-the-box monitoring and management of <application condition="mob">Mobicents</application> components is achieved through <acronym>JMX</acronym> Consoles. <acronym>JSLEE</acronym> allows popular protocol stacks such as <acronym>SIP</acronym> to be plugged in as Resource Adapters (<acronym>RA</acronym>s), and Service Building Blocks—which share many similarities with <acronym>EJB</acronym>s—allow the easy accommodation and integration of enterprise
applications with end points such as the Web, Customer Relationship
Management (<acronym>CRM</acronym>) systems and Service-Oriented Architectures (<acronym>SOA</acronym>s). The <application condition="mob">Mobicents Platform</application> is the natural choice for telecom Operations Support Systems
(OSSes) and Network Management Systems (NMSes).</para>
				<para>In addition to telecom, <application condition="mob">Mobicents</application> is suitable for a variety of problem domains demanding an
Event-Driven Architecture (<acronym>EDA</acronym>) for high-volume, low-latency signaling, such as financial
trading, online gaming, (<acronym>RFID</acronym>) sensor network integration, and distributed control.</para></abstract>
					<corpauthor>
						<inlinemediaobject>
							<imageobject>
								<imagedata fileref="Common_Content/images/title_logo.svg" format="SVG"/>
							</imageobject>
							<textobject>
								<phrase>Logo</phrase>
							</textobject>
						</inlinemediaobject>
					</corpauthor>
					<copyright>
						<year>&YEAR;</year>
						<holder>&HOLDER;</holder>
					</copyright>
					<!-- ORIGINAL:
	<xi:include
		href="Common_Content/Legal_Notice.xml"
		xmlns:xi="http://www.w3.org/2001/XInclude" /> --><!-- FOR JDOCBOOK: --><legalnotice xml:base="Common_Content/Legal_Notice.xml">
	<para>
		Copyright <trademark class="copyright"/> &YEAR; &HOLDER;. This material may only be distributed subject to the terms and conditions set forth in the Creative Commons Attribution-Noncommercial-Share Alike 3.0 Unported License (which is presently available at <ulink url="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</ulink>).
	</para>
	<para>
		Red Hat, the "Shadow Man" logo and JBoss are registered trademarks of Red Hat,
Inc. in the United States and other countries.
	</para>
	<para>
		All other trademarks referenced herein are the property of their respective owners.
	</para>

	<para>
		<address>
			<street>1801 Varsity Drive</street>
			<city>Raleigh</city>, <state>NC</state> <postcode>27606-2072</postcode><country>USA</country><phone>Phone: +1 919 754 3700</phone>
			<phone>Phone: 888 733 4281</phone>
			<fax>Fax: +1 919 754 3701</fax>
			<pob>PO Box 13588</pob><city>Research Triangle Park</city>, <state>NC</state> <postcode>27709</postcode><country>USA</country>
		</address>
	</para>
</legalnotice>
					<authorgroup id="sps-Author_Group">
	<author>
		<firstname>Douglas</firstname>
		<surname>Silas</surname>
		<affiliation>
			<orgname>Red Hat Engineering</orgname>
			<orgdiv>Content Services</orgdiv>
		</affiliation>
		<email condition="mobicents">dhensley@redhat.com</email>
	</author>
	<author>
		<firstname>Ivelin</firstname>
		<surname>Ivanov</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">ivelin.atanasoff.ivanov@gmail.com</email>
	</author>
	<author>
		<firstname>Vladimir</firstname>
		<surname>Ralev</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">vladimir.ralev@gmail.com</email>
	</author>
	<author>
		<firstname>Eduardo</firstname>
		<surname>Martins</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">emmartins@gmail.com</email>
	</author>
	<author>
		<firstname>Jean</firstname>
		<surname>Deruelle</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">jean.deruelle@gmail.com</email>
	</author>
	<author>
		<firstname>Oleg</firstname>
		<surname>Kulikov</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">oleg.kulikoff@gmail.com</email>
	</author>
	<author>
		<firstname>Amit</firstname>
		<surname>Bhayani</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">amit.bhayani@gmail.com</email>
	</author>
	<author>
		<firstname>Luis</firstname>
		<surname>Barreiro</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">lbbbarreiro@gmail.com</email>
	</author>
	<author>
		<firstname>Alexandre</firstname>
		<surname>Mendonça</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">brainslog@gmail.com</email>
	</author>
	<author>
		<firstname>Bartosz</firstname>
		<surname>Baranowski</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">baranowb@gmail.com</email>
	</author>
	<author>
		<firstname>Pavel</firstname>
		<surname>Šlégr</surname>
		<affiliation>
			<orgname>Red Hat, </orgname>
			<orgdiv condition="mob">Mobicents</orgdiv>
		</affiliation>
		<email condition="mob">pavel.slegr@gmail.com</email>
	</author>
</authorgroup>
				</bookinfo>
	<preface id="spsug-SIP_Presence_Service_User_Guide-Preface">
	<!--  chapter id nickname: spsug  --><title>Preface</title>
	<!--  ORIGINAL:
	<xi:include
		href="Common_Content/Conventions.xml"
		xmlns:xi="http://www.w3.org/2001/XInclude" /> --><!-- FOR JDOCBOOK: --><section xml:base="Common_Content/Conventions.xml">
	<title>Document Conventions</title>
	<para>
		This manual uses several conventions to highlight certain words and phrases and draw attention to specific pieces of information.
	</para>
	<para>
		In PDF and paper editions, this manual uses typefaces drawn from the <ulink url="https://fedorahosted.org/liberation-fonts/">Liberation Fonts</ulink> set. The Liberation Fonts set is also used in HTML editions if the set is installed on your system. If not, alternative but equivalent typefaces are displayed. Note: Red Hat Enterprise Linux 5 and later includes the Liberation Fonts set by default.
	</para>
	<section>
		<title>Typographic Conventions</title>
		<para>
			Four typographic conventions are used to call attention to specific words and phrases. These conventions, and the circumstances they apply to, are as follows.
		</para>
		<para>
			<literal>Mono-spaced Bold</literal>
		</para>
		<para>
			Used to highlight system input, including shell commands, file names and paths. Also used to highlight key caps and key-combinations. For example:
		</para>
		<blockquote>
			<para>
				To see the contents of the file <filename>my_next_bestselling_novel</filename> in your current working directory, enter the <command>cat my_next_bestselling_novel</command> command at the shell prompt and press <keycap>Enter</keycap> to execute the command.
			</para>
		</blockquote>
		<para>
			The above includes a file name, a shell command and a key cap, all presented in Mono-spaced Bold and all distinguishable thanks to context.
		</para>
		<para>
			Key-combinations can be distinguished from key caps by the hyphen connecting each part of a key-combination. For example:
		</para>
		<blockquote>
			<para>
				Press <keycap>Enter</keycap> to execute the command.
			</para>
			<para>
				Press <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F1</keycap></keycombo> to switch to the first virtual terminal. Press <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F7</keycap></keycombo> to return to your X-Windows session.
			</para>
		</blockquote>
		<para>
			The first sentence highlights the particular key cap to press. The second highlights two sets of three key caps, each set pressed simultaneously.
		</para>
		<para>
			If source code is discussed, class names, methods, functions, variable names and returned values mentioned within a paragraph will be presented as above, in <literal>Mono-spaced Bold</literal>. For example:
		</para>
		<blockquote>
			<para>
				File-related classes include <classname>filesystem</classname> for file systems, <classname>file</classname> for files, and <classname>dir</classname> for directories. Each class has its own associated set of permissions.
			</para>
		</blockquote>
		<para>
			<application>Proportional Bold</application>
		</para>
		<para>
			This denotes words or phrases encountered on a system, including application names; dialogue box text; labelled buttons; check-box and radio button labels; menu titles and sub-menu titles. For example:
		</para>
		<blockquote>
			<para>
				Choose <guimenu>System &gt; Preferences &gt; Mouse</guimenu> from the main menu bar to launch <application>Mouse Preferences</application>. In the <guilabel>Buttons</guilabel> tab, click the <guilabel>Left-handed mouse</guilabel> check box and click <guibutton>Close</guibutton> to switch the primary mouse button from the left to the right (making the mouse suitable for use in the left hand).
			</para>
			<para>
				To insert a special character into a <application>gedit</application> file, choose <guimenu>Applications &gt; Accessories &gt; Character Map</guimenu> from the main menu bar. Next, choose <guimenu>Search &gt; Find&hellip;</guimenu> from the <application>Character Map</application> menu bar, type the name of the character in the <guilabel>Search</guilabel> field and click <guibutton>Next</guibutton>. The character you sought will be highlighted in the <guilabel>Character Table</guilabel>. Double-click this highlighted character to place it in the <guilabel>Text to copy</guilabel> field and then click the <guibutton>Copy</guibutton> button. Now switch back to your document and choose <guimenu>Edit &gt; Paste</guimenu> from the <application>gedit</application> menu bar.
			</para>
		</blockquote>
		<para>
			The above text includes application names; system-wide menu names and items; application-specific menu names; and buttons and text found within a GUI interface, all presented in Proportional Bold and all distinguishable by context.
		</para>
		<para>
			Note the <guimenu>&gt;</guimenu> shorthand used to indicate traversal through a menu and its sub-menus. This is to avoid the difficult-to-follow 'Select <guimenuitem>Mouse</guimenuitem> from the <guimenu>Preferences</guimenu> sub-menu in the <guimenu>System</guimenu> menu of the main menu bar' approach.
		</para>
		<para>
			<command><replaceable>Mono-spaced Bold Italic</replaceable></command> or <application><replaceable>Proportional Bold Italic</replaceable></application>
		</para>
		<para>
			Whether Mono-spaced Bold or Proportional Bold, the addition of Italics indicates replaceable or variable text. Italics denotes text you do not input literally or displayed text that changes depending on circumstance. For example:
		</para>
		<blockquote>
			<para>
				To connect to a remote machine using ssh, type <command>ssh <replaceable>username</replaceable>@<replaceable>domain.name</replaceable></command> at a shell prompt. If the remote machine is <filename>example.com</filename> and your username on that machine is john, type <command>ssh john@example.com</command>.
			</para>
			<para>
				The <command>mount -o remount <replaceable>file-system</replaceable></command> command remounts the named file system. For example, to remount the <filename>/home</filename> file system, the command is <command>mount -o remount /home</command>.
			</para>
			<para>
				To see the version of a currently installed package, use the <command>rpm -q <replaceable>package</replaceable></command> command. It will return a result as follows: <command><replaceable>package-version-release</replaceable></command>.
			</para>
		</blockquote>
		<para>
			Note the words in bold italics above &mdash; username, domain.name, file-system, package, version and release. Each word is a placeholder, either for text you enter when issuing a command or for text displayed by the system.
		</para>
		<para>
			Aside from standard usage for presenting the title of a work, italics denotes the first use of a new and important term. For example:
		</para>
		<blockquote>
			<para>
				When the Apache HTTP Server accepts requests, it dispatches child processes or threads to handle them. This group of child processes or threads is known as a <firstterm>server-pool</firstterm>. Under Apache HTTP Server 2.0, the responsibility for creating and maintaining these server-pools has been abstracted to a group of modules called <firstterm>Multi-Processing Modules</firstterm> (<firstterm>MPMs</firstterm>). Unlike other modules, only one module from the MPM group can be loaded by the Apache HTTP Server.
			</para>
		</blockquote>
	</section>
	
	<section>
		<title>Pull-quote Conventions</title>
		<para>
			Two, commonly multi-line, data types are set off visually from the surrounding text.
		</para>
		<para>
			Output sent to a terminal is set in <computeroutput>Mono-spaced Roman</computeroutput> and presented thus:
		</para>
		
<screen>
books        Desktop   documentation  drafts  mss    photos   stuff  svn
books_tests  Desktop1  downloads      images  notes  scripts  svgs
</screen>
		<para>
			Source-code listings are also set in <computeroutput>Mono-spaced Roman</computeroutput> but are presented and highlighted as follows:
		</para>
		
<programlisting language="java">
package org.jboss.book.jca.ex1;

import javax.naming.InitialContext;

public class ExClient
{
   public static void main(String args[]) 
       throws Exception
   {
      InitialContext iniCtx = new InitialContext();
      Object         ref    = iniCtx.lookup("EchoBean");
      EchoHome       home   = (EchoHome) ref;
      Echo           echo   = home.create();

      System.out.println("Created Echo");

      System.out.println("Echo.echo('Hello') = " + echo.echo("Hello"));
   }
   
}
</programlisting>
	</section>
	
	<section>
		<title>Notes and Warnings</title>
		<para>
			Finally, we use three visual styles to draw attention to information that might otherwise be overlooked.
		</para>
		<note>
			<title>Note</title>
			<para>
				A note is a tip or shortcut or alternative approach to the task at hand. Ignoring a note should have no negative consequences, but you might miss out on a trick that makes your life easier.
			</para>
		</note>
		<important>
			<title>Important</title>
			<para>
				Important boxes detail things that are easily missed: configuration changes that only apply to the current session, or services that need restarting before an update will apply. Ignoring Important boxes won't cause data loss but may cause irritation and frustration.
			</para>
		</important>
		<warning>
			<title>Warning</title>
			<para>
				A Warning should not be ignored. Ignoring warnings will most likely cause data loss.
			</para>
		</warning>
	</section>

</section>
	<section xml:base="Common_Content/Feedback.xml">
	<title>We Need Feedback!</title>
	<indexterm>
		<primary>feedback</primary>
		<secondary>contact information for this manual</secondary>
	</indexterm>
	<para>
		If you find a typographical error in this manual, or if you have thought of a way to make this manual better, we would love to hear from you! Please submit a report in Bugzilla: <ulink url="http://bugzilla.redhat.com/bugzilla/">http://bugzilla.redhat.com/bugzilla/</ulink> against the product <application>&PRODUCT;.</application>
	</para>
	<para>
		When submitting a bug report, be sure to mention the manual's identifier: <citetitle>&BOOKID;</citetitle>
	</para>
	<para>
		If you have a suggestion for improving the documentation, try to be as specific as possible when describing it. If you have found an error, please include the section number and some of the surrounding text so we can find it easily.
	</para>
</section>
	
</preface>
	<chapter id="ittsps-Introduction_to_the_SIP_Presence_Service">
	<!--  chapter id nickname: ittsps  --><title>Introduction to the Mobicents SIP Presence Service</title>
	<para>
		The Mobicents SIP Presence Service&SPS; provides presence functionalities to SIP-based networks using standards developed by the Internet Engineering Task Force (IETF), the Open Mobile Alliance (OMA), the 3rd Generation Partnership Project (3GPP) and the European Telecommunications Standards Institute (ETSI).
	</para>
	<section id="ittsps-Architecture_of_the_SIP_Presence_Service">
		<title>Architecture of the Mobicents SIP Presence Service</title>
		<para>
			The Mobicents SIP Presence Service is comprised of three separate but interrelated servers.
		</para>
		<para>
			Click to see the <ulink url="http://mobicents-public.googlegroups.com/web/MobicentsSipPresenceServerArchitecture.jpg?gda=hTO2O1wAAAAF_VX0TG5xx-FBSRUj3rSwIO4FCNj8IiPb7zdEEjjYwlAgDLzQ8i_XkNckzGVsS4tcrsHvKlAHZlMtp5btUQdlZU3ceRGzPAq0DrjjiW76mv1ab5qObNWgAVSUTtz98C0">functional diagram of the SIP Presence Service</ulink>
		</para>
		<!-- <mediaobject
			id="ittsps-sps-SIPPresService-dia-SIPPresServiceArchitecture">
			<imageobject>
				<imagedata
					align="center"
					fileref="images/sps-SIPPresService-dia-SIPPresServiceArchitecture.jpg"
					format="JPG" />
			</imageobject>
			<caption>
				<para>Functional Diagram of the Mobicents SIP Presence Service</para>
			</caption>
		</mediaobject> -->
		<variablelist id="ittsps-The_Three_Servers_Comprising_the_SIP_Presence_Service">
			<title>The Three Servers Comprising the Mobicents SIP Presence Service</title>
			<varlistentry>
				<term><xref linkend="xdms-XML_Document_Management_Server"/></term>
				<listitem>
					<para>
						The Mobicents XDM Server is a functional element of next-generation IP communications networks is responsible for handling the management of user XML documents stored on the network side, such as presence authorization rules, static presence information, contact and group lists (also known as <quote>resource lists</quote>), policy data, and many others.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><xref linkend="sps-SIP_Presence_Server"/></term>
				<listitem>
					<para>
						The Mobicents SIP Presence Server is an entity that accepts, stores and distributes Presence Information. The SIP Presence Server performs the following functions:
					</para>
					<itemizedlist>
						<listitem>
							<para>
								It manages publications from one or multiple Presence Source(s) of a certain Presentity. This includes refreshing Presence Information, replacing existing Presence Information with newly-published information, or removing Presence Information.
							</para>
						</listitem>
						<listitem>
							<para>
								It manages subscriptions from Watchers to Presence Information and generates notifications about the Presence Information state changes, retrieving the presence authorization rules from the XDM Server.
							</para>
						</listitem>
						<listitem>
							<para>
								It manages subscriptions from Watcher Information Subscribers to Watcher information and generates notifications about Watcher information state changes.
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><xref linkend="rls-Resource_List_Server"/></term>
				<listitem>
					<para>
						The Resource List Server (RLS) handles subscriptions to Presence Lists. It creates and manages back-end subscriptions to all resources in the Presence List. The list content is retrieved from the XDM Server.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			To fill different needs, you can deploy all servers separated, or all integrated in the same host, and, on top of that, there are JAIN SLEE internal client interfaces available for each, which can turn into a big advantage over other presence services.
		</para>
		<para>
			For documentation on each server proceed to links under this page Resources section.
		</para>
		<formalpara>
			<title>Resources and Further Information about the Mobicents Presence Service</title>
			<para>
				For further information on the Mobicents Presence Service, here is a list of additional resources:
			</para>
		</formalpara>
		<itemizedlist>
			<listitem>
				<para>
					Issue Tracker
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://mobicents.googlecode.com/svn/trunk/servers/sip-presence/">Source Code Location</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://forums.java.net/jive/category.jspa?categoryID=36">Java.net Forums</ulink>
				</para>
			</listitem>
		</itemizedlist>
	</section>

</chapter>
	<chapter id="xdms-XML_Document_Management_Server">
	<!--  chapter id nickname: xdms  --><title>Mobicents XML Document Management Server</title>
	<para>
		The Mobicents XML Document Management Server (XDMS) is part of the Mobicents SIP Presence Service; it is the first free and open source implementation of an XML Document Management Server as defined in the <ulink url="Open Mobile Alliance (OMA) XML Document Management v1.1 specification"/>. This functional element of next-generation IP communication networks is responsible for handling the management of user XML documents stored on the network side, such as presence authorization rules, contact and group lists (also known as resource lists), static presence information, and much more.
	</para>
	<bridgehead id="xdms-Installing_the_Java_Development_Kit">Installing the Java Development Kit</bridgehead><section>
	<!--  chapter id nickname: jdkicar  --><!-- id="jdkicar-binary-Java_Development_Kit-Installing_Configuring_and_Running" --><title>Java Development Kit: Installing, Configuring and Running</title>
	<para>
		The <application condition="mob">Mobicents Platform</application> is written in Java; therefore, before running any <application condition="mob">Mobicents</application> server, you must have a working Java Runtime Environment (<acronym>JRE</acronym>) or Java Development Kit (<acronym>JDK</acronym>) installed on your system. In addition, the JRE or JDK you are using to run <application condition="mob">Mobicents</application> must be version 5 or higher<footnote>
		<para>
			At this point in time, it is possible to run most <application condition="mob">Mobicents</application> servers, such as the JAIN SLEE Server, using a Java 6 JRE or JDK. Be aware, however, that presently the XML Document Management Server does not run on Java 6. We suggest checking the Mobicents web site, forums or discussion pages if you need to inquire about the status of running the XML Document Management Server with Java 6.
		</para>
		</footnote>.
	</para>
	<formalpara>
		<title>Should I Install the JRE or JDK?</title>
		<para>
			Although you can run <application condition="mob">Mobicents</application> servers using the Java Runtime Environment, we assume that most users are developers interested in developing Java-based, <application condition="mob">Mobicents</application>-driven solutions. Therefore, in this guide we take the tact of showing how to install the full Java Development Kit.
		</para>
	</formalpara>
	<formalpara>
		<title>Should I Install the 32-Bit or the 64-Bit JDK, and Does It Matter?</title>
		<para>
			Briefly stated: if you are running on a 64-Bit Linux or Windows platform, you should consider installing and running the 64-bit JDK over the 32-bit one. Here are some heuristics for determining whether you would rather run the 64-bit Java Virtual Machine (JVM) over its 32-bit cousin for your application:
		</para>
	</formalpara>
	<itemizedlist>
		<listitem>
			<para>
				Wider datapath: the pipe between RAM and CPU is doubled, which improves the performance of memory-bound applications when using a 64-bit JVM.
			</para>
		</listitem>
		<listitem>
			<para>
				64-bit memory addressing gives virtually unlimited (1 exabyte) heap allocation. However large heaps affect garbage collection.
			</para>
		</listitem>
		<listitem>
			<para>
				Applications that run with more than 1.5 GB of RAM (including free space for garbage collection optimization) should utilize the 64-bit JVM.
			</para>
		</listitem>
		<listitem>
			<para>
				Applications that run on a 32-bit JVM and do not require more than minimal heap sizes will gain nothing from a 64-bit JVM. Barring memory issues, 64-bit hardware with the same relative clock speed and architecture is not likely to run Java applications faster than their 32-bit cousin.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		Note that the following instructions detail how to download and install the 32-bit JDK, although the steps are nearly identical for installing the 64-bit version.
	</para>
	<!-- <formalpara
			id="jdkicar-binary-Java_Development_Kit-Pre-Install Requirements and Prerequisites">
			<title>Pre-Install Requirements and Prerequisites</title>
			<para></para>
		</formalpara> --><!--  <variablelist
			condition="jdkicar-binary-Java_Development_Kit-Hardware_Requirements">
			<title>Hardware Requirements</title>
			<varlistentry>
				<term>Sufficient Disk Space</term>
				<listitem>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>  --><!--  <variablelist
			condition="jdkicar-binary-Java_Development_Kit-Software_Prerequisites">
			<title>Software Prerequisites</title>
			<varlistentry>
				<term></term>
				<listitem>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>  -->
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Downloading"> --><title>Downloading</title>
		<para>
			You can download the Sun JDK 5.0 (Java 2 Development Kit) from Sun's website: <ulink url="http://java.sun.com/javase/downloads/index_jdk5.jsp"/>. Click on the <guilabel>Download</guilabel> link next to "JDK 5.0 Update <replaceable>&lt;x&gt;</replaceable>" (where <replaceable>&lt;x&gt;</replaceable> is the latest minor version release number). On the next page, select your language and platform (both architecture—whether 32- or 64-bit—and operating system), read and agree to the <literal>Java Development Kit 5.0 License Agreement</literal>, and proceed to the download page.
		</para>
	</formalpara>
	<para>
		The Sun website will present two download alternatives to you: one is an RPM inside a self-extracting file (for example, <filename>jdk-1_5_0_16-linux-i586-rpm.bin</filename>), and the other is merely a self-extracting file (e.g. <filename>jdk-1_5_0_16-linux-i586.bin</filename>). If you are installing the JDK on Red Hat Enterprise Linux, Fedora, or another RPM-based Linux system, we suggest that you download the self-extracting file containing the RPM package, which will set up and use the SysV service scripts in addition to installing the JDK. We also suggest installing the self-extracting RPM file if you will be running <application condition="mob">Mobicents</application> in a production environment.
	</para>
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Installing"> --><title>Installing</title>
		<para>
			The following procedures detail how to install the Java Development Kit on both Linux and Windows.
		</para>
	</formalpara>
	<procedure>
		<title>Installing the JDK on Linux</title>
		<step>
			<para>
				Regardless of which file you downloaded, you can install it on Linux by simply making sure the file is executable and then running it:
			</para>
			
<screen>~]$ chmod +x "jdk-1_5_0_&lt;minor_version&gt;-linux-&lt;architecture&gt;-rpm.bin"
~]$ ./"jdk-1_5_0_&lt;minor_version&gt;-linux-&lt;architecture&gt;-rpm.bin"
</screen>
		</step>
	</procedure>
	
	<note>
		<title>You Installed Using the Non-RPM Installer, but Want the SysV Service Scripts</title>
		<para>
			If you download the non-RPM self-extracting file (and installed it), and you are running on an RPM-based system, you can still set up the SysV service scripts by downloading and installing one of the <literal>-compat</literal> packages from the JPackage project. Remember to download the <literal>-compat</literal> package which corresponds correctly to the minor release number of the JDK you installed. The compat packages are available from <ulink url="ftp://jpackage.hmdc.harvard.edu/JPackage/1.7/generic/RPMS.non-free/"/>.
		</para>
	</note>
	<important>
		<para>
			You do not need to install a <literal>-compat</literal> package in addition to the JDK if you installed the self-extracting RPM file! The <literal>-compat</literal> package merely performs the same SysV service script set up that the RPM version of the JDK installer does.
		</para>
	</important>
	<procedure>
		<title>Installing the JDK on Windows</title>
		<step>
			<para>
				Using Explorer, simply double-click the downloaded self-extracting installer and follow the instructions to install the JDK.
			</para>
		</step>
	</procedure>
	
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Configuring"> --><title>Configuring</title>
		<para>
			Configuring your system for the JDK consists in two tasks: setting the <envar>JAVA_HOME</envar> environment variable, and ensuring that the system is using the proper JDK (or JRE) using the <command>alternatives</command> command. Setting <envar>JAVA_HOME</envar> usually overrides the values for <command>java</command>, <command>javac</command> and <command>java_sdk_1.5.0</command> in <command>alternatives</command>, but we will set them all just to be safe and consistent.
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>Setting the <envar>JAVA_HOME</envar> Environment Variable on Generic Linux</term>
			<listitem>
				<para>
					After installing the JDK, you must ensure that the <envar>JAVA_HOME</envar> environment variable exists and points to the location of your JDK installation.
				</para>
				<formalpara>
					<title>Setting the <envar>JAVA_HOME</envar> Environment Variable on Linux</title>
					<para>
						You can determine whether <envar>JAVA_HOME</envar> is set on your system by <command>echo</command>ing it on the command line:
					</para>
				</formalpara>
				
<screen>~]$ echo $JAVA_HOME
</screen>
				<para>
					If <envar>JAVA_HOME</envar> is not set already, then you must set its value to the location of the JDK installation on your system. You can do this by adding two lines to your personal <filename>~/.bashrc</filename> configuration file. Open <filename>~/.bashrc</filename> (or create it if it doesn't exist) and add a line similar to the following one anywhere inside the file:
				</para>
				
<programlisting>export JAVA_HOME="/usr/lib/jvm/jdk1.5.0_&lt;version&gt;"
</programlisting>
				<para>
					You should also set this environment variable for any other users who will be running <application condition="mob">Mobicents</application> (any environment variables <command>export</command>ed from <filename>~/.bashrc</filename> files are local to that user).
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Setting <envar>java</envar>, <envar>javac</envar> and <envar>java_sdk_1.5.0</envar> Using the <command>alternatives</command> command </term>
			<listitem>
				<formalpara>
					<title>Selecting the Correct System JVM on Linux using <command>alternatives</command></title>
					<para>
						On systems with the <command>alternatives</command> command, including Red Hat Enterprise Linux and Fedora, you can easily choose which JDK (or JRE) installation you wish to use, as well as which <command>java</command> and <command>javac</command> executables should be run when called.
					</para>
				</formalpara>
				<para>
					<emphasis>As the root user</emphasis>, call <command>/usr/sbin/alternatives</command> with the <option>--config java</option> option to select between JDKs and JREs installed on your system:
				</para>
				
<screen>root@localhost ~]$ /usr/sbin/alternatives --config java

There are 3 programs which provide 'java'.

  Selection    Command
-----------------------------------------------
   1           /usr/lib/jvm/jre-1.5.0-gcj/bin/java
   2           /usr/lib/jvm/jre-1.6.0-sun/bin/java
*+ 3         /usr/lib/jvm/jre-1.5.0-sun/bin/java


Enter to keep the current selection[+], or type selection number:
</screen>
				<para>
					In our case, we want to use the Sun JDK, version 5, that we downloaded and installed, to run the <command>java</command> executable. In the <command>alternatives</command> information printout above, a plus (<literal>+</literal>) next to a number indicates the one currently being used. As per <command>alternatives</command>' instructions, pressing <keycap>Enter</keycap> will simply keep the current JVM, or you can enter the number corresponding to the JVM you would prefer to use.
				</para>
				<para>
					Repeat the procedure above for the <command>javac</command> command and the <literal>java_sdk_1.5.0</literal> environment variable, <emphasis>as the root user</emphasis>:
				</para>
				
<screen>~]$ /usr/sbin/alternatives --config javac
</screen>
				
<screen>~]$ /usr/sbin/alternatives --config java_sdk_1.5.0
</screen>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Setting the <envar>JAVA_HOME</envar> Environment Variable on Windows</term>
			<listitem>
				<para>
					For information on how to set environment variables in Windows, refer to <ulink url="http://support.microsoft.com/kb/931715"/>.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Testing"> --><title>Testing</title>
		<para>
			Finally, to make sure that you are using the correct JDK or Java version (5 or higher), and that the java executable is in your <envar>PATH</envar>, run the <command>java <option>-version</option></command> command in the terminal from your home directory:
		</para>
	</formalpara>
	
<screen>~]$ java -version
java version "1.5.0_16"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b03)
Java HotSpot(TM) Client VM (build 1.5.0_16-b03, mixed mode, sharing)
</screen>
	<!-- <formalpara
		id="jdkicar-binary-Java_Development_Kit-Running">
		<title>Running</title>
		<para></para>
	</formalpara> --><!--  <formalpara
		id="jdkicar-binary-Java_Development_Kit-Stopping">
		<title>Stopping</title>
		<para></para>
	</formalpara>  -->
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Uninstalling"> --><title>Uninstalling</title>
		<para>
			There is usually no reason (other than space concerns) to remove a particular JDK from your system, given that you can switch between JDKs and JREs easily using <command>alternatives</command>, and/or by setting <envar>JAVA_HOME</envar>.
		</para>
	</formalpara>
	<formalpara>
		<title>Uninstalling the JDK on Linux</title>
		<para>
			On RPM-based systems, you can uninstall the JDK using the <command>yum <option>remove &lt;jdk_rpm_name&gt;</option></command> command.
		</para>
	</formalpara>
	<formalpara>
		<title>Uninstalling the JDK on Windows</title>
		<para>
			On Windows systems, check the JDK entry in the <literal>Start</literal> menu for an uninstall command, or use <literal>Add/Remove Programs</literal>.
		</para>
	</formalpara>
</section>
	<!--  Binary Distribution  -->
	<section id="xdms-binary-XDM_Server-Installing_Configuring_and_Running">
		<title>Binary Distribution: Installing, Configuring and Running</title>
		<para>
			The XDM Server distribution comes bundled with the JBoss Application Server version 4.2.3 GA, the latest version of the Mobicents JAIN SLEE Server and the SIP and HTTP Servlet resource adapters.
		</para>
		<section id="xdms-binary-XDM_Server-PreInstall_Requirements_and_Prerequisites">
			<title>Pre-Install Requirements and Prerequisites</title>
			<para>
				You should ensure that a few requirements have been met before continuing with the install.
			</para>
			<variablelist id="xdms-binary-XDM_Server-Hardware_Requirements">
				<title>Hardware Requirements</title>
				<varlistentry>
					<term>Sufficient Disk Space</term>
					<listitem>
						<para>
							You must have sufficient disk space in order to install the XDM Server binary release. Once unzipped, version 1.0.0 of the XDM Server binary release requires <emphasis>at least</emphasis> 75 MB of free disk space. Keep in mind that disk space requirements may change from release to release.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Anything Java Itself Will Run On</term>
					<listitem>
						<para>
							The Mobicents XML Document Management Server and its bundled servers, JBoss and JAIN SLEE, are all 100% Java. The XDM Server will run on the same hardware that the JBoss Application Server runs on.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist id="xdms-binary-XDM_Server-Software_Prerequisites">
				<title>Software Prerequisites</title>
				<varlistentry>
					<term>JDK 5</term>
					<listitem>
						<para>
							A working installation of the Java Development Kit (<acronym>JDK</acronym>) version 5<footnote id="xdms-Java_5_is_Required">
							<para>
								The Mobicents XDM Server does not currently run on Java 1.6—a JDK or JRE version 5 is required.
							</para>
							</footnote> is required in order to run the Mobicents XML Document Server. Note that the JBoss Application Server is a runtime dependency of the XDM Server and, as mentioned, comes bundled with the binary distribution.
						</para>
						<important id="xdms-You_Must_Currently_Use_JDK_1.5_Not_1.6">
							<title>You Must Currently Use JDK 5, Not 6!</title>
							<para>
								Currently, the Mobicents XDM Server only runs when using JDK (or JRE) version 5. It will not run on JDK 6. Refer to the XDM Server section of the <ulink url="http://www.mobicents.org">Mobicents web site</ulink> or <ulink url="http://groups.google.com/group/mobicents-public/web">public discussion forums</ulink> if you have any questions about the current status of the XDM Server and JDK 1.6.
							</para>
						</important>
						<!-- <para>For instructions on how to install the JDK, refer to <xref
									linkend="xdms-Installing_the_Java_Development_Kit"/>.</para> -->
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<section id="xdms-binary-XDM_Server-Downloading">
			<title>Downloading</title>
			<para>
				You can download the latest version of the XDM Server from the Mobicents <literal>Downloads</literal> page at <ulink url="http://sourceforge.net/project/showfiles.php?group_id=102670"/>. There, you will see several different binary distributions of the Mobicents SIP Presence Service. The following two binary distribution files include the XDM Server; here are the differences between them:
			</para>
			<variablelist>
				<varlistentry>
					<term>mobicents-sip-presence-integrated-1.0.0.BETA4-CP1.zip</term>
					<listitem>
						<para>
							This zip file—the one with <emphasis>integrated</emphasis> in its file name—contains the SIP Presence Server, the XDM Server, and will contain the Resource List Server once it is available<footnote id="xdms-binary-XDM_Server-Includes_Necessary_Dependencies">
							<para>
								This zip file also includes the necessary dependencies need to run all Presence Service components: the JBoss Application Server version 4.2.3 GA, the latest version of the Mobicents JAIN SLEE Server, and the SIP and HTTP Servlet resource adapters.
							</para>
							</footnote>.
						</para>
						<para>
							If you are unsure which binary distribution file you want or need, choose the <emphasis>integrated</emphasis> one.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>mobicents-sip-presence-xdms-1.0.0.BETA4-CP1.zip</term>
					<listitem>
						<para>
							This zip file—the one with <emphasis>xdms</emphasis> in its file name—contains only the XDM Server, and is useful for deploying the XDM separately (such as on a different node) from other Mobicents servers. It does not contain the SIP Presence Server<footnoteref linkend="xdms-binary-XDM_Server-Includes_Necessary_Dependencies"/>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The following instructions can be followed regardless of which zip file you download, as long as it is one of the two listed above.
			</para>
		</section>
		
		<section id="xdms-binary-XDM_Server-Installing">
			<title>Installing</title>
			<para>
				Once the requirements and prerequisites have been met, and you have downloaded one of the binary distribution zip files, you are ready to install the XDM Server. Follow the instructions below for your platform, whether Linux or Windows.
			</para>
			<note id="xdms-binary-XML_Document_Management_Server-Use_Version_Numbers_Relevant_to_Your_Installation">
				<title>Use Version Numbers Relevant to Your Installation!</title>
				<para>
					For clarity, the command line instructions presented in this chapter use specific version numbers and directory names. Remember to replace them with version numbers and file names relevant to those you are actually working with.
				</para>
			</note>
			<para>
				Note also that for the purpose of the following installation instructions, we will use the <emphasis>integrated</emphasis> binary source distribution. The installation instructions are the same whether you are installing the <emphasis>integrated</emphasis> or <emphasis>xdms</emphasis> binary distriubtion.
			</para>
			<procedure>
				<title>Installing the XDM Server Binary Distribution on Linux</title>
				<step>
					<para>
						First, move to the directory to which you downloaded the binary distribution zip file. For this example, we'll assume you're currently in your home directory, and that you downloaded the zip file to a subdirectory of it, referred to as <filename>downloads</filename>.
					</para>
					
<screen>~]# cd downloads
</screen>
				</step>
				<step>
					<para>
						In <filename>downloads</filename>, create a subdirectory to hold the unzipped XDM Server files. It is good practice to include the version number in this directory name; if you do so, remember to correctly match it with the version of the XDM Server binary distribution you downloaded.
					</para>
					
<screen>downloads]$ mkdir "sps-integrated-1.0.0"
</screen>
				</step>
				<step>
					<para>
						Move the downloaded zip file into the directory you just created:
					</para>
					
<screen>downloads]$ mv "mobicents-sip-presence-integrated-1.0.0.BETA4-CP1.zip" "sps-integrated-1.0.0"
</screen>
				</step>
				<step>
					<para>
						Move into that directory:
					</para>
					
<screen>downloads]$ cd "sps-integrated-1.0.0"
</screen>
				</step>
				<step>
					<para>
						Finally, use Java's <command>jar <option>-xvf</option></command> command to extract the contents of the zip file into the current directory, thus completing the install:
					</para>
					
<screen>sps-integrated-1.0.0]$ jar -xvf "mobicents-sip-presence-integrated-1.0.0.BETA4-CP1.zip"
</screen>
					<stepalternatives>
					<step>
						<para>
							Alternatively, if Linux's <command>unzip</command> utility is present on your system or is installable, you can use it in lieu of Java's <command>jar <option>-xvf</option></command> command:
						</para>
						
<screen>sps-integrated-1.0.0]$ unzip "mobicents-sip-presence-integrated-1.0.0.BETA4-CP1.zip"
</screen>
						<note>
							<para>
								You can also use <command>unzip</command>'s <option>-d</option><filename><replaceable>&lt;unzip_to_location&gt;</replaceable></filename> option to extract the zip file's contents to a location other than the current directory.
							</para>
						</note>
					</step>
					</stepalternatives>
				</step>
				<step>
					<para>
						To free disk space, you may want to delete the zip file once you've extracted its contents:
					</para>
					
<screen>sps-integrated-1.0.0]$ rm "mobicents-sip-presence-integrated-1.0.0.BETA4-CP1.zip"
</screen>
				</step>
			</procedure>
			
			<procedure>
				<title>Installing the XDM Server Binary Distribution on Windows</title>
				<step>
					<para>
						For this example, we'll assume that you downloaded the binary distribution zip file to the <filename>My Downloads</filename> folder. First, using Windows Explorer, create a subfolder in <filename>My Downloads</filename> to extract the zip file's contents into. When you name this folder, it is good practice to include the version number; if you do so, remember to correctly match it with the version of the XDM Server binary distribution you downloaded. In these instructions, we will refer to this folder as <filename>sps-integrated-1.0.0</filename>.
					</para>
				</step>
				<step>
					<para>
						Double-click the downloaded zip file, selecting as the destination folder the one you just created to hold the zip file's contents.
					</para>
					<stepalternatives>
					<step>
						<para>
							Alternatively, it is also possible to use Java's <command>jar <option>-xvf</option></command> command to extract the binary distribution files from the zip archive. To use this method instead, first move the downloaded zip file from <filename>My Downloads</filename> to the folder that you just created to hold the XDM Server files.
						</para>
					</step>
					<step>
						<para>
							Then, open the Windows Command Prompt and navigate to the folder holding the archive using the <command>cd</command> command:
						</para>
						<note id="xdms-binary-XDM_Server-Opening_the_Command_Prompt_from_Windows_Explorer">
							<title>Opening the Command Prompt from Windows Explorer</title>
							<para>
								If you are using Windows Vista®, you can open the Command Prompt directly from Explorer. Hold down the <keycap>Shift</keycap> key and right-click on either a folder, the desktop, or inside a folder. This will cause an <guimenuitem>Open Command Window Here</guimenuitem> context menu item to appear, which can be used to open the Command Prompt with the current working directory set to either the folder you opened, or opened it from.
							</para>
						</note>
						
<screen>C:\Users\Me&gt;cd "My Downloads\sps-integrated-1.0.0"
</screen>
					</step>
					<step>
						<para>
							Finally, use the <command>jar <option>-xvf</option></command> command to extract the archive contents into the current folder.
						</para>
						
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;jar -xvf "mobicents-sip-presence-integrated-1.0.0.BETA4-CP1.zip"
</screen>
					</step>
					</stepalternatives>
				</step>
				<step>
					<para>
						At this point, you may want to move the folder holding the XDM Server binary files (in this example, the folder named <filename>sps-integrated-1.0.0</filename>) to another location. This step is not strictly necessary, but it is probably a good idea to move the XDM Server folder from <filename>My Downloads</filename> to a user-defined location for storing runnable programs. Any location will suffice, however.
					</para>
				</step>
				<step>
					<para>
						You may also want to delete the zip file after extracting its contents in order to free disk space:
					</para>
					
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;delete "mobicents-sip-presence-integrated-1.0.0.BETA4-CP1.zip"
</screen>
				</step>
			</procedure>

		</section>
		
		<section id="xdms-binary-XDM_Server-Configuring">
			<title>Configuring (and Setting JBOSS_HOME)</title>
			<section>
	<title>Setting the JBOSS HOME Environment Variable</title>
	<para condition="mob">
		The <application>Mobicents Platform</application> and most Mobicents servers are built on top of the <application>JBoss Application Server</application> (<application>JBoss AS</application>). When the <application>Mobicents Platform</application> or Mobicents servers are built <emphasis>from source</emphasis>, then <envar>JBOSS_HOME</envar> <emphasis>must</emphasis> be set, because the Mobicents files are installed into (or <quote>over top of</quote> if you prefer) a clean <application>JBoss AS</application> installation, and the build process assumes that the location pointed to by the <envar>JBOSS_HOME</envar> environment variable at the time of building is the <application>JBoss AS</application> installation into which you want it to install the Mobicents files.
	</para>
	<para condition="mob">
		This guide does not detail building the <application>Mobicents Platform</application> or any Mobicents servers from source. It is nevertheless useful to understand the role played by <application>JBoss AS</application> and <envar>JBOSS_HOME</envar> in the Mobicents ecosystem.
	</para>
	<para condition="mob">
		The immediately-following section considers whether you need to set <envar>JBOSS_HOME</envar> at all and, if so, when. The subsequent sections detail how to set <envar>JBOSS_HOME</envar> on Linux and Windows
	</para>
	<important condition="mob">
		<para>
			Even if you fall into the category below of <emphasis>not needing</emphasis> to set <envar>JBOSS_HOME</envar>, you may want to for various reasons anyway. Also, even if you are instructed that you do <emphasis>not need</emphasis> to set <envar>JBOSS_HOME</envar>, it is good practice nonetheless to check and make sure that <envar>JBOSS_HOME</envar> actually <emphasis>isn't</emphasis> set or defined on your system for some reason. This can save you both time and frustration.
		</para>
	</important>
	<bridgehead condition="mob">You <emphasis>DO NOT NEED</emphasis> to set <envar>JBOSS_HOME</envar> if...</bridgehead>
	<itemizedlist condition="mob">
		<listitem>
			<para>
				...you have installed the <application>Mobicents Platform</application> binary distribution.
			</para>
		</listitem>
		<listitem>
			<para>
				...you have installed a Mobicents server binary distribution <emphasis>which bundles <application>JBoss AS</application>.</emphasis>
			</para>
		</listitem>
	</itemizedlist>
	<bridgehead condition="mob">You <emphasis>MUST</emphasis> set <envar>JBOSS_HOME</envar> if...</bridgehead>
	<itemizedlist condition="mob">
		<listitem>
			<para>
				...you are installing the <application>Mobicents Platform</application> or any of the Mobicents servers <emphasis>from source</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				...you are installing the <application>Mobicents Platform</application> binary distribution, or one of the Mobicents server binary distributions, which <emphasis>do not</emphasis> bundle <application>JBoss AS</application>.
			</para>
		</listitem>
	</itemizedlist>
	<para condition="mob">
		Naturally, if you installed the <application>Mobicents Platform</application> or one of the Mobicents server binary releases which <emphasis>do not</emphasis> bundle <application>JBoss AS</application>, yet requires it to run, then you should <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Installation_Guide/4/html/index.html">install <application>JBoss AS</application></ulink> before setting <envar>JBOSS_HOME</envar> or proceeding with anything else.
	</para>
	<formalpara>
		<title>Setting the JBOSS_HOME Environment Variable on Linux</title>
		<para>
			The <envar>JBOSS_HOME</envar> environment variable must point to the directory which contains all of the files for the <phrase condition="mob"><application>Mobicents Platform</application> or individual Mobicents server</phrase> that you installed. As another hint, this topmost directory contains a <filename>bin</filename> subdirectory.
		</para>
	</formalpara>
	<para>
		Setting <envar>JBOSS_HOME</envar> in your personal <filename>~/.bashrc</filename> startup script carries the advantage of retaining effect over reboots. Each time you log in, the environment variable is sure to be set for you, as a user. On Linux, it is possible to set <envar>JBOSS_HOME</envar> as a system-wide environment variable, by defining it in <filename>/etc/bashrc</filename>, but this method is neither recommended nor detailed in these instructions.
	</para>
	<procedure>
		<title>To Set JBOSS_HOME on Linux...</title>
		<step>
			<para>
				Open the <filename>~/.bashrc</filename> startup script, which is a hidden file in your home directory, in a text editor, and insert the following line on its own line while substituting for the actual install location on your system:
			</para>
			
<screen>export JBOSS_HOME="/home/<replaceable>username</replaceable>/<replaceable>path</replaceable>/<replaceable>to</replaceable>/<replaceable>install_directory</replaceable>"
</screen>
		</step>
		<step>
			<para>
				Save and close the <filename>.bashrc</filename> startup script.
			</para>
		</step>
		<step>
			<para>
				You should <command>source</command> the <filename>.bashrc</filename> script to force your change to take effect, so that <envar>JBOSS_HOME</envar> becomes set for the current session<footnote>
				<para>
					Note that any other terminals which were opened prior to your having altered <filename>.bashrc</filename> will need to <command>source</command><filename>~/.bashrc</filename> as well should they require access to <envar>JBOSS_HOME</envar>.
				</para>
				</footnote>.
			</para>
			
<screen>~]$ source ~/.bashrc
</screen>
		</step>
		<step>
			<para>
				Finally, ensure that <envar>JBOSS_HOME</envar> is set in the current session, and actually points to the correct location:
			</para>
			
<screen>~]$ echo $JBOSS_HOME
/home/me/mobicents-all-1.2.0.GA-jboss-4.2.3.GA
</screen>
		</step>
	</procedure>
	
	<formalpara>
		<title>Setting the JBOSS_HOME Environment Variable on Windows</title>
		<para>
			The <envar>JBOSS_HOME</envar> environment variable must point to the directory which contains all of the files for the <phrase condition="mob">Mobicents Platform or individual Mobicents server</phrase> that you installed. As another hint, this topmost directory contains a <filename>bin</filename> subdirectory.
		</para>
	</formalpara>
	<para>
		For information on how to set environment variables in recent versions of Windows, refer to <ulink url="http://support.microsoft.com/kb/931715"/>.
	</para>
</section>
			<!-- <variablelist>
					<varlistentry>
						<term>XCAP Root</term>
						<listitem>
							<para>Inside the Mobicents Presence Service root directory (<filename>/trunk/servers/sip-presence</filename>) <filename>pom.xml</filename>, you can set the <literal>xdm.server.xcap.root</literal> Maven property. This property defines the relative path to root that is to be considered the XCAP root for all XCAP URIs. This value must match the servlet name used in the Mobicents HTTP Servlet resource adapter. The default value is <replaceable>/mobicents</replaceable>.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Dynamic User Provisioning</term>
						<listitem>
							<para>Inside the Mobicents Presence Service root directory (<filename>/trunk/servers/sip-presence</filename>) pom.xml, you can set the <literal>dynamicUserProvisioning</literal> Maven property. This property defines whether the XDM Server should provision the user when a <literal>PUT</literal> request is being processed and the user is not installed for the request's application usage. The default value is true.</para>
						</listitem>
					</varlistentry>
				</variablelist> -->
		</section>
		
		<section id="xdms-binary-XDM_Server-Running">
			<title>Running</title>
			<para>
				Once installed, you can run the Mobicents XDM Server by executing the one of the startup scripts in the <filename>&lt;topmost_directory&gt;/bin</filename> directory (on Linux or Windows), or by double-clicking the <filename>run.bat</filename> executable batch file in that same directory (on Windows only). However, we suggest always starting the XDM Server using the terminal or Command Prompt because you are then able to read—and act upon—any startup messages, and possibly debug any problems that might arise. In the Linux terminal or Command Prompt, you will be able to tell that the XDM Server started successfully if the last line of output is similar to the following (ending with <quote>Started in 23s:648ms</quote>):
			</para>
			
<programlisting>11:23:07,656 INFO  [Server] JBoss (MX MicroKernel) [4.2.3.GA (build: SVNTag=JBoss_4_2_2_GA date=200710221139)] Started in 23s:648ms
</programlisting>
			<para>
				Detailed instructions are given below, arranged by platform.
			</para>
			<procedure>
				<title>Running the XDM Server on Linux</title>
				<step>
					<para>
						Change your working directory to the XDM Server's topmost directory (the one which you extracted the zip file's contents to):
					</para>
					
<screen>downloads]$ cd "sps-integrated-1.0.0"
</screen>
				</step>
				<step performance="optional">
					<para>
						(Optional) Ensure that the <filename>bin/run.sh</filename> start script is executable:
					</para>
					
<screen>sps-integrated-1.0.0]$ chmod +x bin/run.sh
</screen>
				</step>
				<step>
					<para>
						Finally, execute the <filename>run.sh</filename> Bourne shell script:
					</para>
					
<screen>sps-integrated-1.0.0]$ ./bin/run.sh
</screen>
					<stepalternatives>
					<step>
						<para>
							Instead of executing the Bourne shell script to start the server, you may alternatively run the <filename>run.jar</filename> executable Java archive in the <filename>bin</filename> directory:
						</para>
						
<screen>sps-integrated-1.0.0]$ java -jar bin/run.jar
</screen>
					</step>
					</stepalternatives>
				</step>
			</procedure>
			
			<procedure>
				<title>Running the XDM Server on Windows</title>
				<step>
					<para>
						There are several different ways to start the XDM Server on Windows. All of the following methods accomplish the same task.
					</para>
					<para>
						Using Windows Explorer, change your folder to the one in which you unzipped the downloaded zip file, and then to the <filename>bin</filename> subfolder.
					</para>
				</step>
				<step>
					<para>
						Although not the preferred way (see below), it is possible to start the XDM Server by double-clicking on the <filename>run.bat</filename> executable batch file.
					</para>
					<stepalternatives>
					<step>
						<para>
							As mentioned above, the best way to start the XDM Server is by using the Command Prompt. Doing it this way will allow you to view all of the server startup details, which will enable you to easily determine whether any problems were encountered during the startup process. You can open the Command Prompt directly from the <filename>&lt;topmost_directory&gt;\bin</filename> folder in Windows Explorer <!-- (see <xref
										linkend="xdms-binary-XDM_Server-Opening_the_Command_Prompt_from_Windows_Explorer"/> for details) -->, or you can open the Command Prompt via the <guilabel>Start</guilabel> menu and navigate to the correct folder:
						</para>
						
<screen>C:\Users\Me\My Downloads&gt; cd "sps-integrated-1.0.0"
</screen>
					</step>
					<step>
						<para>
							Start the XDM Server by running the executable <filename>run.bat</filename> batch file:
						</para>
						
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;bin\run.bat
</screen>
						<stepalternatives>
						<step>
							<para>
								It is also possible to start the XDM Server by running the <filename>run.jar</filename> executable Java archive:
							</para>
							
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;java -jar bin\run.jar
</screen>
						</step>
						</stepalternatives>
					</step>
					</stepalternatives>
				</step>
			</procedure>

		</section>
		
		<section id="xdms-binary-XDM_Server-Using">
			<title>Using</title>
			<para>
				&nbsp;
			</para>
		</section>
		
		<section id="xdms-binary-XDM_Server-Stopping">
			<title>Stopping</title>
			<para>
				Just as there are multiple ways to run the XDM Server, there are multiple ways to stop it. Detailed instructions for stopping the XDM Server are given below, arranged by platform. Note that if you properly stop the server, you will see the following three lines as the last output in the Linux terminal or Command Prompt:
			</para>
			
<programlisting>[Server] Shutdown complete
Shutdown complete
Halting VM
</programlisting>
			<procedure>
				<title>Stopping the XDM Server on Linux by Issuing a Control Code</title>
				<step>
					<para>
						Assuming that you started the XDM Server as a foreground process in the terminal, the easiest way to stop it is by pressing the <keycombo action="simul"><keycap>Ctrl</keycap><keycap>c</keycap></keycombo> key combination in the same terminal in which you started it.
					</para>
				</step>
			</procedure>
			
			<procedure>
				<title>Stopping the XDM Server on Linux by Executing <filename>shutdown.sh</filename> or <filename>shutdown.jar</filename></title>
				<step>
					<para>
						Another way to shut down the XDM Server is by executing the <filename>shutdown.sh</filename> Bourne shell script in the <filename>&lt;topmost_directory&gt;/bin</filename> directory. To do so, first change your working directory to the XDM Server's topmost directory (the one to which you extracted the downloaded zip file's contents):
					</para>
					
<screen>downloads]$ cd "sps-integrated-1.0.0"
</screen>
				</step>
				<step performance="optional">
					<para>
						(Optional) Ensure that the bin/shutdown.sh start script is executable:
					</para>
					
<screen>sps-integrated-1.0.0]$ chmod +x bin/shutdown.sh
</screen>
				</step>
				<step>
					<para>
						Finally, run the <filename>shutdown.sh</filename> executable Bourne shell script, and remember to add the <option>-S</option> option (which is the short option for <option>--shutdown</option>) as a command line argument:
					</para>
					
<screen>sps-integrated-1.0.0]$ ./bin/shutdown.sh -S
</screen>
					<stepalternatives>
					<step>
						<para>
							Instead of executing the Bourne shell script to stop the server, you may alternatively run the <filename>shutdown.jar</filename> executable Java archive to do so (and remembering, again, to add the <option>-S</option> command line argument):
						</para>
						
<screen>sps-integrated-1.0.0]$ java -jar bin/shutdown.jar -S
</screen>
					</step>
					</stepalternatives>
				</step>
			</procedure>
			
			<procedure>
				<title>Stopping the XDM Server on Windows</title>
				<step>
					<para>
						Stopping the XDM Server on Windows consists in executing either the <filename>shutdown.bat</filename> or the <filename>shutdown.jar</filename> executable file in the <filename>bin</filename> subfolder of the XDM Server binary distribution. Make sure to add the <option>-S</option> option (which is the short option for <option>--shutdown</option>) as a command line argument.
					</para>
					
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;bin\shutdown.bat -S
</screen>
					<stepalternatives>
					<step>
						<para>
							Alternatively, you can execute the <filename>shutdown.jar</filename> Java archive by running the <command>java <option>-jar</option></command> command, and remembering to add the <option>-S</option> option as a command line argument:
						</para>
						
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;java -jar bin\shutdown.jar -S
</screen>
					</step>
					</stepalternatives>
				</step>
			</procedure>

		</section>
		
		<section id="xdms-binary-XDM_Server-Testing">
			<title>Testing</title>
			<para>
				&nbsp;
			</para>
		</section>
		
		<section id="xdms-binary-XDM_Server-Uninstalling">
			<title>Uninstalling</title>
			<para>
				To uninstall the XDM Server, simply delete the directory you decompressed the binary distribution archive into.
			</para>
		</section>

	</section>
	
	<section id="xdms-Functional_Architecture_of_the_XDM_Server">
		<title>Functional Architecture of the XDM Server</title>
		<para>
			The Mobicents XDM Server includes the following XCAP application usages:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<ulink url="http://tools.ietf.org/html/rfc5025">IETF Presence Rules (RFC 5025)</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://www.openmobilealliance.org/Technical/release_program/Presence_simple_v1_1.aspx">OMA Presence Rules (OMA Presence Simple v1.1 Candidate Release)</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://tools.ietf.org/html/rfc4826">IETF Resource Lists</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://tools.ietf.org/html/rfc4826">IETF RLS Services (RFC 4826)</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://tools.ietf.org/html/rfc4825">IETF XCAP-CAPS (RFC 4825)</ulink>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The SIP interface partially implements the XCAP Diff Event IETF draft, version 3. Subscriptions to a single document or usage by an entire application are supported; however, these differing usages do not extend to the single-XML element or attribute value level. Regarding the notifications, the diff-processing subscription parameter, if present, is ignored, and the patching of content is not available at the moment, which means that only the document etags, new and/or old, will be provided.
		</para>
		<para>
			Click to see a <ulink url="http://mobicents-public.googlegroups.com/web/XDM+Functional+Architecture.jpg?gda=vowVslEAAAAF_VX0TG5xx-FBSRUj3rSw3W3MetT0jWUh4Xj3nCKKkJRg1dOenZYHeKjWSh6kKUoVQKX_J3c2taUlhicc8as8Uwk_6Qi3BU8HCN0q6OYwM5VxXgp_nHWJXhfr7YhqVgA">diagram of the Mobicents XML Document Management Server Architecture</ulink>
		</para>
		<!-- <mediaobject
			id="xdms-sps-XDMS-dia-XDMFunctionalArchitecture">
			<imageobject>
				<imagedata
					align="center"
					width="700"
					fileref="images/sps-XDMS-dia-XDMFunctionalArchitecture.jpg"
					format="JPG" />
			</imageobject>
			<caption>
				<para>The Mobicents XML Document Management Server</para>
			</caption>
		</mediaobject> -->
		<para>
			The XDM Server comprises the following functional elements:
		</para>
		<variablelist id="xdms-Functional_Elements_of_the_XDM_Server">
			<title>Functional Elements of the XDM Server</title>
			<varlistentry>
				<term>Data Source</term>
				<listitem>
					<para>
						The XDM Server data source is where all user XML documents are stored. Information related to the server itself is also stored in this element along with the user's provisioned data
					</para>
					<para>
						The data source also handles subscriptions to updates on specific documents, or complete XCAP application usages.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Aggregation Proxy</term>
				<listitem>
					<para>
						The aggregation proxy is responsible for handling an XDM client's XCAP requests, which includes authentication and authorization of the requester.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Request Processor</term>
				<listitem>
					<para>
						This element includes the XCAP Server logic to process an XCAP request and return a proper response.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>XDM Event Subscription Control</term>
				<listitem>
					<para>
						This element, using the SIP protocol, is responsible for handling subscriptions to documents managed by the XDM. Its functions include the authentication and authorization of a subscription, attachment to update events on specific documents or application usages, and the sending of notifications when documents change.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<formalpara>
			<title>Implementation Architecture of the Mobicents XML Document Management Server</title>
			<para>
				The XDM Server is built on top of the Mobicents JAIN SLEE container. This figure depicts the architecture of the XDM Server implementation.
			</para>
		</formalpara>
		<para>
			Click to see a <ulink url="http://mobicents-public.googlegroups.com/web/XDMS+Implementation.jpg?gda=9hCf4kkAAAAF_VX0TG5xx-FBSRUj3rSw3W3MetT0jWUh4Xj3nCKKkJQ0jPtcnRwbFIKXxiisEZifs7maW8FM3kQMOUV88KaGhAioEG5q2hncZWbpWmJ7IQ">diagram of the XDM Server Implementation</ulink>
		</para>
		<!-- <mediaobject
			id="xdms-sps-XDMS-dia-XDMSImplementation">
			<imageobject>
				<imagedata
					align="center"
					width="700"
					fileref="images/sps-XDMS-dia-XDMSImplementation.jpg"
					format="JPG" />
			</imageobject>
			<caption>
				<para>Mobicents XML Document Management Server</para>
			</caption>
		</mediaobject> -->
		<variablelist id="xdms-The_Functional_Elements_Which_Compose_the_XML_Document_Management_Server">
			<title>The Functional Elements Which Compose the XML Document Management Server</title>
			<varlistentry>
				<term>Data Source Resource Adapter</term>
				<listitem>
					<para>
						This Resource Adaptor implements the Data Source functional element.
					</para>
					<para>
						The <literal>RA Type</literal> defines two activities objects, <literal>DocumentActivity</literal> and <literal>AppUsageActivity</literal>, both of which are used to fire events that signal that a document, element or attribute was updated.
					</para>
					<para>
						The <literal>RA Type</literal> also defines a Service Building Block (SBB) RA interface to manage the users and documents stored in the XDM Server, and create activities, where events will be fired. The resource adapter will only fire events on activities that exist; that is, the RA won't create activities implicitly if a document is updated.
					</para>
					<para>
						The <literal>RA Type</literal> also provides a base abstract implementation of the resource adapter, making it very simple to change the underlying resource used to store information, which is by default the internal JDBC datasource of the JBoss Application Server.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>AppUsage Cache Resource Adaptor</term>
				<listitem>
					<para>
						This resource adapter stores the XCAP application usages installed in the server.
					</para>
					<para>
						Each <literal>AppUsage</literal> is an object that includes the logic to validate XCAP documents that result from XCAP requests and are expensive to create; this resource adapter thus provides caching of AppUsages, using a pool model.
					</para>
					<para>
						The resource adapter doesn't possess events or activities.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>AppUsage Service</term>
				<listitem>
					<para>
						XCAP Application Usages are installed through a JAIN SLEE service, making it possible to add and/or remove application usages while the server is running.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Aggregation Proxy Service</term>
				<listitem>
					<para>
						This JAIN SLEE service implements the aggregation proxy functional element. It handles events fired by the Mobicents HTTP Servlet resource adapter and then uses two child SBBs: the <literal>User Profile Enabler SBB</literal> to retrieve information regarding the user needed for authentication/authorization of the XCAP request, and the <literal>Request Processor SBB</literal>, which handles the XCAP request.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Request Processor SBB</term>
				<listitem>
					<para>
						The <literal>Request Processor SBB</literal> implements the request processor functional element, providing a synchronous SBB interface to process XCAP requests. It uses the <literal>AppUsage Cache</literal> resource adapter to borrow AppUsage objects, and the Data Source resource adapter to retrieve or set documents stored in the server's data source.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>User Profile Enabler SBB (TBD: not available yet)</term>
				<listitem>
					<para>
						This SBB provides a synchronous SBB interface used in JAIN SLEE child relations in order to retrieve user information. Two different implementations of the interface are provided, one considers that the information is stored in the XDM Data Source, another interfaces to a Diameter Sh Server such as IMS HSS.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>XCAP Diff Subscription Control Service</term>
				<listitem>
					<para>
						This JAIN SLEE Service extends the abstract SIP Event Subscription Control component to handle SIP subscriptions on the xcap-diff event package.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			The implementation architecture figure also contains client-side components:
		</para>
		<variablelist id="xdms-Client-Side_Components_of_the_XML_Document_Management_Server_">
			<title>Client-Side Components of the XML Document Management Server </title>
			<varlistentry>
				<term>XCAP Client</term>
				<listitem>
					<para>
						The XCAP client is a simple API to interact with an XCAP Server that internally uses the Apache HTTP Client.
					</para>
					<para>
						The API documentation and example code snippets can be found TBD
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>XCAP Client Resource Adaptor</term>
				<listitem>
					<para>
						The XCAP Client Resource Adaptor adapts the XCAP Client API into JAIN SLEE domain. It provides methods to interact with the XCAP server in both syncronous and asyncronous ways.
					</para>
					<para>
						The RA Type description and code snippets using the RA can be found here.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>XDM Client SBB</term>
				<listitem>
					<para>
						The XDMClientSBB is an interface of a JAIN SLEE SBB to be used as a client to the Mobicents XDM Server (and others compliant with same standards), in JAIN SLEE child relations.
					</para>
					<para>
						Two implementations of this interface are provided:
					</para>
					<itemizedlist>
						<listitem>
							<para>
								<literal>InternalXDMClientSBB</literal> is intended to be used on applications running in the Mobicents XDM Server JAIN SLEE container, and
							</para>
						</listitem>
						<listitem>
							<para>
								<literal>ExternalXDMClientSBB</literal>, which is intended to be used on applications in a different JAIN SLEE container than the Mobicents XDM Server.
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			TBD: This version of the documentation is from http://groups.google.com/group/mobicents-public/web/mobicents-xdm-server and the original author is Eduardo Martins, JBoss R&amp;D.
		</para>
	</section>
	
	<section id="xdms-Resources_and_Further_Information_about_the_XDM_Server">
		<title>Resources and Further Information about the XDM Server</title>
		<para>
			For further information on the Mobicents XDM Server, here is a list of additional resources:
		</para>
		<itemizedlist id="xdms-Further_Information_on_the_XDM_Server">
			<listitem>
				<para>
					How to Manage the Mobicents XDM Server
				</para>
			</listitem>
			<listitem>
				<para>
					How to Create an XCAP App(lication)Usage
				</para>
			</listitem>
			<listitem>
				<para>
					Integrating XDM in your JAIN SLEE Apps: Code Snippets for XDM Client SBB Usage
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://groups.google.com/group/mobicents-public/web/xcap-client-api">XCAP Client API Documentation</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://groups.google.com/group/mobicents-public/web/xcap-client-resource-adaptor">XCAP Client RA Type Description and Example Code Snippets</ulink>
				</para>
			</listitem>
			<listitem>
				<para>
					Mobicents SIP Presence Service
				</para>
			</listitem>
			<listitem>
				<para>
					Want to contribute?
				</para>
			</listitem>
		</itemizedlist>
	</section>

</chapter>
	<chapter id="sps-SIP_Presence_Server">
	<!--  chapter id nickname: sps  --><title>Mobicents SIP Presence Server</title>
	<para>
		The Mobicents SIP Presence Server is a free and open source implementation of a SIP Presence Server, as defined by the Internet Engineering Task Force (IETF), the Open Mobile Alliance (OMA), the 3rd Generation Partnership Project (3GPP) and the European Telecommunications Standards Institute (ETSI).
	</para>
	<para>
		The SIP Presence Server is an entity that accepts, stores and distributes SIP Presence Information.
	</para>
	<bridgehead id="sps-Installing_the_Java_Development_Kit">Installing the Java Development Kit</bridgehead><section>
	<!--  chapter id nickname: jdkicar  --><!-- id="jdkicar-binary-Java_Development_Kit-Installing_Configuring_and_Running" --><title>Java Development Kit: Installing, Configuring and Running</title>
	<para>
		The <application condition="mob">Mobicents Platform</application> is written in Java; therefore, before running any <application condition="mob">Mobicents</application> server, you must have a working Java Runtime Environment (<acronym>JRE</acronym>) or Java Development Kit (<acronym>JDK</acronym>) installed on your system. In addition, the JRE or JDK you are using to run <application condition="mob">Mobicents</application> must be version 5 or higher<footnote>
		<para>
			At this point in time, it is possible to run most <application condition="mob">Mobicents</application> servers, such as the JAIN SLEE Server, using a Java 6 JRE or JDK. Be aware, however, that presently the XML Document Management Server does not run on Java 6. We suggest checking the Mobicents web site, forums or discussion pages if you need to inquire about the status of running the XML Document Management Server with Java 6.
		</para>
		</footnote>.
	</para>
	<formalpara>
		<title>Should I Install the JRE or JDK?</title>
		<para>
			Although you can run <application condition="mob">Mobicents</application> servers using the Java Runtime Environment, we assume that most users are developers interested in developing Java-based, <application condition="mob">Mobicents</application>-driven solutions. Therefore, in this guide we take the tact of showing how to install the full Java Development Kit.
		</para>
	</formalpara>
	<formalpara>
		<title>Should I Install the 32-Bit or the 64-Bit JDK, and Does It Matter?</title>
		<para>
			Briefly stated: if you are running on a 64-Bit Linux or Windows platform, you should consider installing and running the 64-bit JDK over the 32-bit one. Here are some heuristics for determining whether you would rather run the 64-bit Java Virtual Machine (JVM) over its 32-bit cousin for your application:
		</para>
	</formalpara>
	<itemizedlist>
		<listitem>
			<para>
				Wider datapath: the pipe between RAM and CPU is doubled, which improves the performance of memory-bound applications when using a 64-bit JVM.
			</para>
		</listitem>
		<listitem>
			<para>
				64-bit memory addressing gives virtually unlimited (1 exabyte) heap allocation. However large heaps affect garbage collection.
			</para>
		</listitem>
		<listitem>
			<para>
				Applications that run with more than 1.5 GB of RAM (including free space for garbage collection optimization) should utilize the 64-bit JVM.
			</para>
		</listitem>
		<listitem>
			<para>
				Applications that run on a 32-bit JVM and do not require more than minimal heap sizes will gain nothing from a 64-bit JVM. Barring memory issues, 64-bit hardware with the same relative clock speed and architecture is not likely to run Java applications faster than their 32-bit cousin.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		Note that the following instructions detail how to download and install the 32-bit JDK, although the steps are nearly identical for installing the 64-bit version.
	</para>
	<!-- <formalpara
			id="jdkicar-binary-Java_Development_Kit-Pre-Install Requirements and Prerequisites">
			<title>Pre-Install Requirements and Prerequisites</title>
			<para></para>
		</formalpara> --><!--  <variablelist
			condition="jdkicar-binary-Java_Development_Kit-Hardware_Requirements">
			<title>Hardware Requirements</title>
			<varlistentry>
				<term>Sufficient Disk Space</term>
				<listitem>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>  --><!--  <variablelist
			condition="jdkicar-binary-Java_Development_Kit-Software_Prerequisites">
			<title>Software Prerequisites</title>
			<varlistentry>
				<term></term>
				<listitem>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>  -->
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Downloading"> --><title>Downloading</title>
		<para>
			You can download the Sun JDK 5.0 (Java 2 Development Kit) from Sun's website: <ulink url="http://java.sun.com/javase/downloads/index_jdk5.jsp"/>. Click on the <guilabel>Download</guilabel> link next to "JDK 5.0 Update <replaceable>&lt;x&gt;</replaceable>" (where <replaceable>&lt;x&gt;</replaceable> is the latest minor version release number). On the next page, select your language and platform (both architecture—whether 32- or 64-bit—and operating system), read and agree to the <literal>Java Development Kit 5.0 License Agreement</literal>, and proceed to the download page.
		</para>
	</formalpara>
	<para>
		The Sun website will present two download alternatives to you: one is an RPM inside a self-extracting file (for example, <filename>jdk-1_5_0_16-linux-i586-rpm.bin</filename>), and the other is merely a self-extracting file (e.g. <filename>jdk-1_5_0_16-linux-i586.bin</filename>). If you are installing the JDK on Red Hat Enterprise Linux, Fedora, or another RPM-based Linux system, we suggest that you download the self-extracting file containing the RPM package, which will set up and use the SysV service scripts in addition to installing the JDK. We also suggest installing the self-extracting RPM file if you will be running <application condition="mob">Mobicents</application> in a production environment.
	</para>
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Installing"> --><title>Installing</title>
		<para>
			The following procedures detail how to install the Java Development Kit on both Linux and Windows.
		</para>
	</formalpara>
	<procedure>
		<title>Installing the JDK on Linux</title>
		<step>
			<para>
				Regardless of which file you downloaded, you can install it on Linux by simply making sure the file is executable and then running it:
			</para>
			
<screen>~]$ chmod +x "jdk-1_5_0_&lt;minor_version&gt;-linux-&lt;architecture&gt;-rpm.bin"
~]$ ./"jdk-1_5_0_&lt;minor_version&gt;-linux-&lt;architecture&gt;-rpm.bin"
</screen>
		</step>
	</procedure>
	
	<note>
		<title>You Installed Using the Non-RPM Installer, but Want the SysV Service Scripts</title>
		<para>
			If you download the non-RPM self-extracting file (and installed it), and you are running on an RPM-based system, you can still set up the SysV service scripts by downloading and installing one of the <literal>-compat</literal> packages from the JPackage project. Remember to download the <literal>-compat</literal> package which corresponds correctly to the minor release number of the JDK you installed. The compat packages are available from <ulink url="ftp://jpackage.hmdc.harvard.edu/JPackage/1.7/generic/RPMS.non-free/"/>.
		</para>
	</note>
	<important>
		<para>
			You do not need to install a <literal>-compat</literal> package in addition to the JDK if you installed the self-extracting RPM file! The <literal>-compat</literal> package merely performs the same SysV service script set up that the RPM version of the JDK installer does.
		</para>
	</important>
	<procedure>
		<title>Installing the JDK on Windows</title>
		<step>
			<para>
				Using Explorer, simply double-click the downloaded self-extracting installer and follow the instructions to install the JDK.
			</para>
		</step>
	</procedure>
	
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Configuring"> --><title>Configuring</title>
		<para>
			Configuring your system for the JDK consists in two tasks: setting the <envar>JAVA_HOME</envar> environment variable, and ensuring that the system is using the proper JDK (or JRE) using the <command>alternatives</command> command. Setting <envar>JAVA_HOME</envar> usually overrides the values for <command>java</command>, <command>javac</command> and <command>java_sdk_1.5.0</command> in <command>alternatives</command>, but we will set them all just to be safe and consistent.
		</para>
	</formalpara>
	<variablelist>
		<varlistentry>
			<term>Setting the <envar>JAVA_HOME</envar> Environment Variable on Generic Linux</term>
			<listitem>
				<para>
					After installing the JDK, you must ensure that the <envar>JAVA_HOME</envar> environment variable exists and points to the location of your JDK installation.
				</para>
				<formalpara>
					<title>Setting the <envar>JAVA_HOME</envar> Environment Variable on Linux</title>
					<para>
						You can determine whether <envar>JAVA_HOME</envar> is set on your system by <command>echo</command>ing it on the command line:
					</para>
				</formalpara>
				
<screen>~]$ echo $JAVA_HOME
</screen>
				<para>
					If <envar>JAVA_HOME</envar> is not set already, then you must set its value to the location of the JDK installation on your system. You can do this by adding two lines to your personal <filename>~/.bashrc</filename> configuration file. Open <filename>~/.bashrc</filename> (or create it if it doesn't exist) and add a line similar to the following one anywhere inside the file:
				</para>
				
<programlisting>export JAVA_HOME="/usr/lib/jvm/jdk1.5.0_&lt;version&gt;"
</programlisting>
				<para>
					You should also set this environment variable for any other users who will be running <application condition="mob">Mobicents</application> (any environment variables <command>export</command>ed from <filename>~/.bashrc</filename> files are local to that user).
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Setting <envar>java</envar>, <envar>javac</envar> and <envar>java_sdk_1.5.0</envar> Using the <command>alternatives</command> command </term>
			<listitem>
				<formalpara>
					<title>Selecting the Correct System JVM on Linux using <command>alternatives</command></title>
					<para>
						On systems with the <command>alternatives</command> command, including Red Hat Enterprise Linux and Fedora, you can easily choose which JDK (or JRE) installation you wish to use, as well as which <command>java</command> and <command>javac</command> executables should be run when called.
					</para>
				</formalpara>
				<para>
					<emphasis>As the root user</emphasis>, call <command>/usr/sbin/alternatives</command> with the <option>--config java</option> option to select between JDKs and JREs installed on your system:
				</para>
				
<screen>root@localhost ~]$ /usr/sbin/alternatives --config java

There are 3 programs which provide 'java'.

  Selection    Command
-----------------------------------------------
   1           /usr/lib/jvm/jre-1.5.0-gcj/bin/java
   2           /usr/lib/jvm/jre-1.6.0-sun/bin/java
*+ 3         /usr/lib/jvm/jre-1.5.0-sun/bin/java


Enter to keep the current selection[+], or type selection number:
</screen>
				<para>
					In our case, we want to use the Sun JDK, version 5, that we downloaded and installed, to run the <command>java</command> executable. In the <command>alternatives</command> information printout above, a plus (<literal>+</literal>) next to a number indicates the one currently being used. As per <command>alternatives</command>' instructions, pressing <keycap>Enter</keycap> will simply keep the current JVM, or you can enter the number corresponding to the JVM you would prefer to use.
				</para>
				<para>
					Repeat the procedure above for the <command>javac</command> command and the <literal>java_sdk_1.5.0</literal> environment variable, <emphasis>as the root user</emphasis>:
				</para>
				
<screen>~]$ /usr/sbin/alternatives --config javac
</screen>
				
<screen>~]$ /usr/sbin/alternatives --config java_sdk_1.5.0
</screen>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>Setting the <envar>JAVA_HOME</envar> Environment Variable on Windows</term>
			<listitem>
				<para>
					For information on how to set environment variables in Windows, refer to <ulink url="http://support.microsoft.com/kb/931715"/>.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Testing"> --><title>Testing</title>
		<para>
			Finally, to make sure that you are using the correct JDK or Java version (5 or higher), and that the java executable is in your <envar>PATH</envar>, run the <command>java <option>-version</option></command> command in the terminal from your home directory:
		</para>
	</formalpara>
	
<screen>~]$ java -version
java version "1.5.0_16"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b03)
Java HotSpot(TM) Client VM (build 1.5.0_16-b03, mixed mode, sharing)
</screen>
	<!-- <formalpara
		id="jdkicar-binary-Java_Development_Kit-Running">
		<title>Running</title>
		<para></para>
	</formalpara> --><!--  <formalpara
		id="jdkicar-binary-Java_Development_Kit-Stopping">
		<title>Stopping</title>
		<para></para>
	</formalpara>  -->
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Uninstalling"> --><title>Uninstalling</title>
		<para>
			There is usually no reason (other than space concerns) to remove a particular JDK from your system, given that you can switch between JDKs and JREs easily using <command>alternatives</command>, and/or by setting <envar>JAVA_HOME</envar>.
		</para>
	</formalpara>
	<formalpara>
		<title>Uninstalling the JDK on Linux</title>
		<para>
			On RPM-based systems, you can uninstall the JDK using the <command>yum <option>remove &lt;jdk_rpm_name&gt;</option></command> command.
		</para>
	</formalpara>
	<formalpara>
		<title>Uninstalling the JDK on Windows</title>
		<para>
			On Windows systems, check the JDK entry in the <literal>Start</literal> menu for an uninstall command, or use <literal>Add/Remove Programs</literal>.
		</para>
	</formalpara>
</section>
	<!--  Binary Installation  -->
	<section id="sps-binary-SIP_Presence_Server-Installing_Configuring_and_Running">
		<title>Mobicents SIP Presence Server: Installing, Configuring and Running</title>
		<para>
			The SIP Presence Server distribution comes bundled with the JBoss Application Server version 4.2.3 GA, the latest version of the Mobicents JAIN SLEE Server and the SIP and HTTP Servlet resource adapters.
		</para>
		<section id="sps-binary-SIP_Presence_Server-PreInstall_Requirements_and_Prerequisites">
			<title>Pre-Install Requirements and Prerequisites</title>
			<para>
				You should ensure that a few requirements have been met before continuing with the install.
			</para>
			<variablelist id="sps-binary-SIP_Presence_Server-Hardware_Requirements">
				<title>Hardware Requirements</title>
				<varlistentry>
					<term>Sufficient Disk Space</term>
					<listitem>
						<para>
							You must have sufficient disk space in order to install the SIP Presence Server binary release. Once unzipped, version 1.0.0 of the SIP Presence Server binary release requires <emphasis>at least</emphasis> 75 MB of free disk space. Keep in mind that disk space requirements may change from release to release.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Anything Java Itself Will Run On</term>
					<listitem>
						<para>
							The Mobicents SIP Presence Server and its bundled servers, JBoss and JAIN SLEE, are all 100% Java. The SIP Presence Server will run on the same hardware that the JBoss Application Server runs on.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<variablelist id="sps-binary-SIP_Presence_Server-Software_Prerequisites">
				<title>Software Prerequisites</title>
				<varlistentry>
					<term>JDK 5 or Higher</term>
					<listitem>
						<para>
							A working installation of the Java Development Kit (<acronym>JDK</acronym>) version 5 or higher is required in order to run the Mobicents SIP Presence Server. Note that the JBoss Application Server is a runtime dependency of the Presence Server and, as mentioned, comes bundled with the binary distribution.
						</para>
						<!-- <para>For instructions on how to install the JDK, refer to <xref linkend="sps-Installing_the_Java_Development_Kit"/>.</para> -->
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<section id="sps-binary-SIP_Presence_Server-Downloading">
			<title>Downloading</title>
			<para>
				You can download the latest version of the SIP Presence Server from the Mobicents <literal>Downloads</literal> page at <ulink url="http://sourceforge.net/project/showfiles.php?group_id=102670"/>. There, you will see several different binary distributions of the Mobicents SIP Presence Service. Make sure you download the correct binary distribution zip file for the SIP Presence Server:
			</para>
			<variablelist>
				<varlistentry>
					<term>mobicents-sip-presence-integrated-.zip</term>
					<listitem>
						<para>
							This zip file—the one with <emphasis>integrated</emphasis> in its file name—contains the SIP Presence Server, the XDM Server, and will contain the Resource List Server once it is available<footnote id="sps-binary-SIP_Presence_Server-Includes_Necessary_Dependencies">
							<para>
								This zip file also includes the necessary dependencies need to run all Presence Service components: the JBoss Application Server version 4.2.3 GA, the latest version of the Mobicents JAIN SLEE Server, and the SIP and HTTP Servlet resource adapters.
							</para>
							</footnote>.
						</para>
						<important id="sps-This_Is_the_Zip_File_You_Want">
							<title>This Is the Zip File You Want!</title>
							<para>
								Whereas the <emphasis>integrated</emphasis> binary distribution contains the Mobicents SIP Presence Server, the others do not! If you are installing the SIP Presence Server, grab the most recent version of the zip file with <emphasis>integrated</emphasis> in it. This means that there is no standalone release containing only the SIP Presence Server instead of, for example, the XDM Server.
							</para>
						</important>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>mobicents-sip-presence-xdms-.zip</term>
					<listitem>
						<para>
							This zip file—the one with <emphasis>xdms</emphasis> in its file name—contains only the XDM Server, and is useful for deploying the XDM separately (such as on a different node) from other Mobicents servers. It does not contain the SIP Presence Server—if you are installing the SIP Presence Server, this is not the zip file you want<footnoteref linkend="sps-binary-SIP_Presence_Server-Includes_Necessary_Dependencies"/>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<section id="sps-binary-SIP_Presence_Server-Installing">
			<title>Installing</title>
			<para>
				Once the requirements and prerequisites have been met, and you have downloaded one of the binary distribution zip files, you are ready to install the SIP Presence Server. Follow the instructions below for your platform, whether Linux or Windows.
			</para>
			<note id="sps-section-SIP_Presence_Server-Use_Version_Numbers_Relevant_to_Your_Installation">
				<title>Use Version Numbers Relevant to Your Installation!</title>
				<para>
					For clarity, the command line instructions presented in this chapter use specific version numbers and directory names. Remember to replace them with version numbers and file names relevant to those you are actually working with.
				</para>
			</note>
			<procedure>
				<title>Installing the SIP Presence Server Binary Distribution on Linux</title>
				<step>
					<para>
						First, move to the directory to which you downloaded the binary distribution zip file. For this example, we'll assume you're currently in your home directory, and that you downloaded the zip file to a subdirectory of it, referred to as <filename>downloads</filename>.
					</para>
					
<screen>~]# cd downloads
</screen>
				</step>
				<step>
					<para>
						In <filename>downloads</filename>, create a subdirectory to hold the unzipped SIP Presence Server files. It is good practice to include the version number in this directory name; if you do so, remember to correctly match it with the version of the SIP Presence Server binary distribution you downloaded.
					</para>
					
<screen>downloads]$ mkdir "sps-integrated-1.0.0"
</screen>
				</step>
				<step>
					<para>
						Move the downloaded zip file into the directory you just created:
					</para>
					
<screen>downloads]$ mv "mobicents-sip-presence-integrated-.zip" "sps-integrated-1.0.0"
</screen>
				</step>
				<step>
					<para>
						Move into that directory:
					</para>
					
<screen>downloads]$ cd "sps-integrated-1.0.0"
</screen>
				</step>
				<step>
					<para>
						Finally, use Java's <command>jar <option>-xvf</option></command> command to extract the contents of the zip file into the current directory, thus completing the install:
					</para>
					
<screen>sps-integrated-1.0.0]$ jar -xvf "mobicents-sip-presence-integrated-.zip"
</screen>
					<stepalternatives>
					<step>
						<para>
							Alternatively, if Linux's <command>unzip</command> utility is present on your system or is installable, you can use it in lieu of Java's <command>jar <option>-xvf</option></command> command:
						</para>
						
<screen>sps-integrated-1.0.0]$ unzip "mobicents-sip-presence-integrated-.zip"
</screen>
						<note>
							<para>
								You can also use <command>unzip</command>'s <option>-d</option><filename><replaceable>&lt;unzip_to_location&gt;</replaceable></filename> option to extract the zip file's contents to a location other than the current directory.
							</para>
						</note>
					</step>
					</stepalternatives>
				</step>
				<step>
					<para>
						To free disk space, you may want to delete the zip file once you've extracted its contents:
					</para>
					
<screen>sps-integrated-1.0.0]$ rm "mobicents-sip-presence-integrated-.zip"
</screen>
				</step>
			</procedure>
			
			<procedure>
				<title>Installing the SIP Presence Server Binary Distribution on Windows</title>
				<step>
					<para>
						For this example, we'll assume that you downloaded the binary distribution zip file to the <filename>My Downloads</filename> folder. First, using Windows Explorer, create a subfolder in <filename>My Downloads</filename> to extract the zip file's contents into. When you name this folder, it is good practice to include the version number; if you do so, remember to correctly match it with the version of the SIP Presence Server binary distribution you downloaded. In these instructions, we will refer to this folder as <filename>sps-integrated-1.0.0</filename>.
					</para>
				</step>
				<step>
					<para>
						Double-click the downloaded zip file, selecting as the destination folder the one you just created to hold the zip file's contents.
					</para>
					<stepalternatives>
					<step>
						<para>
							Alternatively, it is also possible to use Java's <command>jar <option>-xvf</option></command> command to extract the binary distribution files from the zip archive. To use this method instead, first move the downloaded zip file from <filename>My Downloads</filename> to the folder that you just created to hold the SIP Presence Server files.
						</para>
					</step>
					<step>
						<para>
							Then, open the Windows Command Prompt and navigate to the folder holding the archive using the <command>cd</command> command:
						</para>
						<note id="sps-binary-SIP_Presence_Server-Opening_the_Command_Prompt_from_Windows_Explorer">
							<title>Opening the Command Prompt from Windows Explorer</title>
							<para>
								If you are using Windows Vista®, you can open the Command Prompt directly from Explorer. Hold down the <keycap>Shift</keycap> key and right-click on either a folder, the desktop, or inside a folder. This will cause an <guimenuitem>Open Command Window Here</guimenuitem> context menu item to appear, which can be used to open the Command Prompt with the current working directory set to either the folder you opened, or opened it from.
							</para>
						</note>
						
<screen>C:\Users\Me&gt;cd "My Downloads\sps-integrated-1.0.0"
</screen>
					</step>
					<step>
						<para>
							Finally, use the <command>jar <option>-xvf</option></command> command to extract the archive contents into the current folder.
						</para>
						
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;jar -xvf "mobicents-sip-presence-integrated-.zip"
</screen>
					</step>
					</stepalternatives>
				</step>
				<step>
					<para>
						At this point, you may want to move the folder holding the SIP Presence Server binary files (in this example, the folder named <filename>sps-integrated-1.0.0</filename>) to another location. This step is not strictly necessary, but it is probably a good idea to move the SIP Presence Server folder from <filename>My Downloads</filename> to a user-defined location for storing runnable programs. Any location will suffice, however.
					</para>
				</step>
				<step>
					<para>
						You may also want to delete the zip file after extracting its contents in order to free disk space:
					</para>
					
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;delete "mobicents-sip-presence-integrated-.zip"
</screen>
				</step>
			</procedure>

		</section>
		
		<section id="sps-binary-SIP_Presence_Server-Running">
			<title>Running</title>
			<para>
				Once installed, you can run the Mobicents SIP Presence Server by executing the one of the startup scripts in the <filename>&lt;topmost_directory&gt;/bin</filename> directory (on Linux or Windows), or by double-clicking the <filename>run.bat</filename> executable batch file in that same directory (on Windows only). However, we suggest always starting the SIP Presence Server using the terminal or Command Prompt because you are then able to read—and act upon—any startup messages, and possibly debug any problems that might arise. In the Linux terminal or Command Prompt, you will be able to tell that the SIP Presence Server started successfully if the last line of output is similar to the following (ending with <quote>Started in 23s:648ms</quote>):
			</para>
			
<programlisting>11:23:07,656 INFO  [Server] JBoss (MX MicroKernel) [4.2.3.GA (build: SVNTag=JBoss_4_2_2_GA date=200710221139)] Started in 23s:648ms
</programlisting>
			<para>
				Detailed instructions are given below, arranged by platform.
			</para>
			<procedure>
				<title>Running the SIP Presence Server on Linux</title>
				<step>
					<para>
						Change your working directory to the SIP Presence Server's topmost directory (the one which you extracted the zip file's contents to):
					</para>
					
<screen>downloads]$ cd "sps-integrated-1.0.0"
</screen>
				</step>
				<step performance="optional">
					<para>
						(Optional) Ensure that the <filename>bin/run.sh</filename> start script is executable:
					</para>
					
<screen>sps-integrated-1.0.0]$ chmod +x bin/run.sh
</screen>
				</step>
				<step>
					<para>
						Finally, execute the <filename>run.sh</filename> Bourne shell script:
					</para>
					
<screen>sps-integrated-1.0.0]$ ./bin/run.sh
</screen>
					<stepalternatives>
					<step>
						<para>
							Instead of executing the Bourne shell script to start the server, you may alternatively run the <filename>run.jar</filename> executable Java archive in the <filename>bin</filename> directory:
						</para>
						
<screen>sps-integrated-1.0.0]$ java -jar bin/run.jar
</screen>
					</step>
					</stepalternatives>
				</step>
			</procedure>
			
			<procedure>
				<title>Running the SIP Presence Server on Windows</title>
				<step>
					<para>
						There are several different ways to start the SIP Presence Server on Windows. All of the following methods accomplish the same task.
					</para>
					<para>
						Using Windows Explorer, change your folder to the one in which you unzipped the downloaded zip file, and then to the <filename>bin</filename> subfolder.
					</para>
				</step>
				<step>
					<para>
						Although not the preferred way (see below), it is possible to start the SIP Presence Server by double-clicking on the <filename>run.bat</filename> executable batch file.
					</para>
					<stepalternatives>
					<step>
						<para>
							As mentioned above, the best way to start the SIP Presence Server is by using the Command Prompt. Doing it this way will allow you to view all of the server startup details, which will enable you to easily determine whether any problems were encountered during the startup process. You can open the Command Prompt directly from the <filename>&lt;topmost_directory&gt;\bin</filename> folder in Windows Explorer <!-- (see <xref
									linkend="sps-binary-SIP_Presence_Server-Opening_the_Command_Prompt_from_Windows_Explorer"/> for details) -->, or you can open the Command Prompt via the <guilabel>Start</guilabel> menu and navigate to the correct folder:
						</para>
						
<screen>C:\Users\Me\My Downloads&gt; cd "sps-integrated-1.0.0"
</screen>
					</step>
					<step>
						<para>
							Start the SIP Presence Server by running the executable <filename>run.bat</filename> batch file:
						</para>
						
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;bin\run.bat
</screen>
						<stepalternatives>
						<step>
							<para>
								It is also possible to start the SIP Presence Server by running the <filename>run.jar</filename> executable Java archive:
							</para>
							
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;java -jar bin\run.jar
</screen>
						</step>
						</stepalternatives>
					</step>
					</stepalternatives>
				</step>
			</procedure>

		</section>
		
		<section id="sps-binary-SIP_Presence_Server-Stopping">
			<title>Stopping</title>
			<para>
				Just as there are multiple ways to run the SIP Presence Server, there are multiple ways to stop it. Detailed instructions for stopping the SIP Presence Server are given below, arranged by platform. Note that if you properly stop the server, you will see the following three lines as the last output in the Linux terminal or Command Prompt:
			</para>
			
<programlisting>[Server] Shutdown complete
Shutdown complete
Halting VM
</programlisting>
			<procedure>
				<title>Stopping the SIP Presence Server on Linux by Issuing a Control Code</title>
				<step>
					<para>
						Assuming that you started the SIP Presence Server as a foreground process in the terminal, the easiest way to stop it is by pressing the <keycombo action="simul"><keycap>Ctrl</keycap><keycap>c</keycap></keycombo> key combination in the same terminal in which you started it.
					</para>
				</step>
			</procedure>
			
			<procedure>
				<title>Stopping the SIP Presence Server on Linux by Executing <filename>shutdown.sh</filename> or <filename>shutdown.jar</filename></title>
				<step>
					<para>
						Another way to shut down the SIP Presence Server is by executing the <filename>shutdown.sh</filename> Bourne shell script in the <filename>&lt;topmost_directory&gt;/bin</filename> directory. To do so, first change your working directory to the SIP Presence Server's topmost directory (the one to which you extracted the downloaded zip file's contents):
					</para>
					
<screen>downloads]$ cd "sps-integrated-1.0.0"
</screen>
				</step>
				<step performance="optional">
					<para>
						(Optional) Ensure that the bin/shutdown.sh start script is executable:
					</para>
					
<screen>sps-integrated-1.0.0]$ chmod +x bin/shutdown.sh
</screen>
				</step>
				<step>
					<para>
						Finally, run the <filename>shutdown.sh</filename> executable Bourne shell script, and remember to add the <option>-S</option> option (which is the short option for <option>--shutdown</option>) as a command line argument:
					</para>
					
<screen>sps-integrated-1.0.0]$ ./bin/shutdown.sh -S
</screen>
					<stepalternatives>
					<step>
						<para>
							Instead of executing the Bourne shell script to stop the server, you may alternatively run the <filename>shutdown.jar</filename> executable Java archive to do so (and remembering, again, to add the <option>-S</option> command line argument):
						</para>
						
<screen>sps-integrated-1.0.0]$ java -jar bin/shutdown.jar -S
</screen>
					</step>
					</stepalternatives>
				</step>
			</procedure>
			
			<procedure>
				<title>Stopping the SIP Presence Server on Windows</title>
				<step>
					<para>
						Stopping the SIP Presence Server on Windows consists in executing either the <filename>shutdown.bat</filename> or the <filename>shutdown.jar</filename> executable file in the <filename>bin</filename> subfolder of the SIP Presence Server binary distribution. Make sure to add the <option>-S</option> option (which is the short option for <option>--shutdown</option>) as a command line argument.
					</para>
					
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;bin\shutdown.bat -S
</screen>
					<stepalternatives>
					<step>
						<para>
							Alternatively, you can execute the <filename>shutdown.jar</filename> Java archive by running the <command>java <option>-jar</option></command> command, and remembering to add the <option>-S</option> option as a command line argument:
						</para>
						
<screen>C:\Users\Me\My Downloads\sps-integrated-1.0.0&gt;java -jar bin\shutdown.jar -S
</screen>
					</step>
					</stepalternatives>
				</step>
			</procedure>

		</section>
		
		<section id="sps-binary-SIP_Presence_Server-Configuring">
			<title>Configuring (and Setting JBOSS_HOME)</title>
			<section>
	<title>Setting the JBOSS HOME Environment Variable</title>
	<para condition="mob">
		The <application>Mobicents Platform</application> and most Mobicents servers are built on top of the <application>JBoss Application Server</application> (<application>JBoss AS</application>). When the <application>Mobicents Platform</application> or Mobicents servers are built <emphasis>from source</emphasis>, then <envar>JBOSS_HOME</envar> <emphasis>must</emphasis> be set, because the Mobicents files are installed into (or <quote>over top of</quote> if you prefer) a clean <application>JBoss AS</application> installation, and the build process assumes that the location pointed to by the <envar>JBOSS_HOME</envar> environment variable at the time of building is the <application>JBoss AS</application> installation into which you want it to install the Mobicents files.
	</para>
	<para condition="mob">
		This guide does not detail building the <application>Mobicents Platform</application> or any Mobicents servers from source. It is nevertheless useful to understand the role played by <application>JBoss AS</application> and <envar>JBOSS_HOME</envar> in the Mobicents ecosystem.
	</para>
	<para condition="mob">
		The immediately-following section considers whether you need to set <envar>JBOSS_HOME</envar> at all and, if so, when. The subsequent sections detail how to set <envar>JBOSS_HOME</envar> on Linux and Windows
	</para>
	<important condition="mob">
		<para>
			Even if you fall into the category below of <emphasis>not needing</emphasis> to set <envar>JBOSS_HOME</envar>, you may want to for various reasons anyway. Also, even if you are instructed that you do <emphasis>not need</emphasis> to set <envar>JBOSS_HOME</envar>, it is good practice nonetheless to check and make sure that <envar>JBOSS_HOME</envar> actually <emphasis>isn't</emphasis> set or defined on your system for some reason. This can save you both time and frustration.
		</para>
	</important>
	<bridgehead condition="mob">You <emphasis>DO NOT NEED</emphasis> to set <envar>JBOSS_HOME</envar> if...</bridgehead>
	<itemizedlist condition="mob">
		<listitem>
			<para>
				...you have installed the <application>Mobicents Platform</application> binary distribution.
			</para>
		</listitem>
		<listitem>
			<para>
				...you have installed a Mobicents server binary distribution <emphasis>which bundles <application>JBoss AS</application>.</emphasis>
			</para>
		</listitem>
	</itemizedlist>
	<bridgehead condition="mob">You <emphasis>MUST</emphasis> set <envar>JBOSS_HOME</envar> if...</bridgehead>
	<itemizedlist condition="mob">
		<listitem>
			<para>
				...you are installing the <application>Mobicents Platform</application> or any of the Mobicents servers <emphasis>from source</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				...you are installing the <application>Mobicents Platform</application> binary distribution, or one of the Mobicents server binary distributions, which <emphasis>do not</emphasis> bundle <application>JBoss AS</application>.
			</para>
		</listitem>
	</itemizedlist>
	<para condition="mob">
		Naturally, if you installed the <application>Mobicents Platform</application> or one of the Mobicents server binary releases which <emphasis>do not</emphasis> bundle <application>JBoss AS</application>, yet requires it to run, then you should <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Installation_Guide/4/html/index.html">install <application>JBoss AS</application></ulink> before setting <envar>JBOSS_HOME</envar> or proceeding with anything else.
	</para>
	<formalpara>
		<title>Setting the JBOSS_HOME Environment Variable on Linux</title>
		<para>
			The <envar>JBOSS_HOME</envar> environment variable must point to the directory which contains all of the files for the <phrase condition="mob"><application>Mobicents Platform</application> or individual Mobicents server</phrase> that you installed. As another hint, this topmost directory contains a <filename>bin</filename> subdirectory.
		</para>
	</formalpara>
	<para>
		Setting <envar>JBOSS_HOME</envar> in your personal <filename>~/.bashrc</filename> startup script carries the advantage of retaining effect over reboots. Each time you log in, the environment variable is sure to be set for you, as a user. On Linux, it is possible to set <envar>JBOSS_HOME</envar> as a system-wide environment variable, by defining it in <filename>/etc/bashrc</filename>, but this method is neither recommended nor detailed in these instructions.
	</para>
	<procedure>
		<title>To Set JBOSS_HOME on Linux...</title>
		<step>
			<para>
				Open the <filename>~/.bashrc</filename> startup script, which is a hidden file in your home directory, in a text editor, and insert the following line on its own line while substituting for the actual install location on your system:
			</para>
			
<screen>export JBOSS_HOME="/home/<replaceable>username</replaceable>/<replaceable>path</replaceable>/<replaceable>to</replaceable>/<replaceable>install_directory</replaceable>"
</screen>
		</step>
		<step>
			<para>
				Save and close the <filename>.bashrc</filename> startup script.
			</para>
		</step>
		<step>
			<para>
				You should <command>source</command> the <filename>.bashrc</filename> script to force your change to take effect, so that <envar>JBOSS_HOME</envar> becomes set for the current session<footnote>
				<para>
					Note that any other terminals which were opened prior to your having altered <filename>.bashrc</filename> will need to <command>source</command><filename>~/.bashrc</filename> as well should they require access to <envar>JBOSS_HOME</envar>.
				</para>
				</footnote>.
			</para>
			
<screen>~]$ source ~/.bashrc
</screen>
		</step>
		<step>
			<para>
				Finally, ensure that <envar>JBOSS_HOME</envar> is set in the current session, and actually points to the correct location:
			</para>
			
<screen>~]$ echo $JBOSS_HOME
/home/me/mobicents-all-1.2.0.GA-jboss-4.2.3.GA
</screen>
		</step>
	</procedure>
	
	<formalpara>
		<title>Setting the JBOSS_HOME Environment Variable on Windows</title>
		<para>
			The <envar>JBOSS_HOME</envar> environment variable must point to the directory which contains all of the files for the <phrase condition="mob">Mobicents Platform or individual Mobicents server</phrase> that you installed. As another hint, this topmost directory contains a <filename>bin</filename> subdirectory.
		</para>
	</formalpara>
	<para>
		For information on how to set environment variables in recent versions of Windows, refer to <ulink url="http://support.microsoft.com/kb/931715"/>.
	</para>
</section>
		</section>
		
		<section id="sps-binary-SIP_Presence_Server-Testing">
			<title>Testing</title>
			<para>
				&nbsp;
			</para>
		</section>
		
		<section id="sps-binary-SIP_Presence_Server-Uninstalling">
			<title>Uninstalling</title>
			<para>
				To uninstall the XDM Server, simply delete the directory you decompressed the binary distribution archive into.
			</para>
		</section>

	</section>
	
	<!-- DON'T REMOVE! These are the only existant instructions on how to configure for building from source --><!-- <section
		id="sps-Configuring_Installing_and_Testing_the_SIP_Presence_Server">
		<title>Configuring, Installing and Testing the SIP Presence Server</title>
		<formalpara>
			<title>Requirements</title>
			<para>The Mobicents SIP Presence Server depends on the Mobicents Converged Application Server and the Mobicents SIP resource adapter, which should be deloyed before starting the SIP Presence Server.</para>
		</formalpara>
		<formalpara>
			<title>Configuration</title>
			<para>The Mobicents SIP Presence Server can be customized in the following aspects before being built.</para>
		</formalpara>
		<formalpara>
			<title>Customizing the Presence Server</title>
			<para>&nbsp;</para>
		</formalpara>
		<variablelist>
			<varlistentry>
				<term>The Presence Server's Notifiers PresRules AUID</term>
				<listitem>
					<para>The id of the application usage to be used by the Presence Server to retreive the presence rules of a notifier from the XML Document Management Server. You can change the default value (the OMA Presence Rules) by using the <literal>${presence.server.notifier.presrules.auid}</literal> property in the root <filename>pom.xml</filename> before building the server(s).</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>The Presence Server's Notifiers PresRules Document Name</term>
				<listitem>
					<para>The name of the document to be used by the Presence Server to retreive the presence rules of a notifier from the XML Document Management Server. You can change the default value (pres-rules) by using the ${presence.server.notifier.presrules.documentName} property in the root <filename>pom.xml</filename> of this directory before building the server(s).</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>Note that you do not need to touch or configure anything in order to deploy the server.</para>
		<formalpara>
			<title>Installing the Mobicents SIP Presence Server</title>
			<para>TBD (Fix this with proper instructions): Currently, the Mobicents SIP Presence Server can only be installed as integrated with the Mobicents XML Document Management Server, i.e. in an all-in-one SIP Presence Server architecture<footnote
					id="sps-integrated_presence_server"><para>This limitation is due to the current lack of an external XDM Client SBB component.</para>
				</footnote>.</para>
		</formalpara>
		<important
			id="sps-Installing_the_Presence_Server_Also_Installs_the_XDM_Server">
			<title>Installing the SIP Presence Server Also Installs the XDM Server</title>
			<para>You should also make sure that all the install requirements of the Mobicents XDM Server are met before attempting to install the Mobicents SIP Presence Server. See <xref
					linkend="fpara-XDM_Requirements"/>.</para>
		</important> --><!-- <formalpara>
			<title>Installing the Mobicents XML Document Management Server</title>
			<para>How you install the XDM Server depends on whether you are using the Mobicents binary distribution, or running the source distribution.</para>
		</formalpara>
		<itemizedlist>
			<listitem>
				<formalpara>
					<title>Installing the XDM Server using the Mobicents Binary Distribution</title>
					<para>TBD: (Fix this with proper instructions): Using the binary release, you can install the XDM Server by doing an ant deploy on the <filename>servers/sip-presence/integrated</filename> directory.</para>
				</formalpara>
			</listitem>
			<listitem>
				<formalpara>
					<title>Installing the XDM Server after Building Mobicents from Source</title>
					<para>TBD: (Fix this with proper instructions): From the source code repository, you can install the XDM Server by doing a mvn install on the <filename>/trunk/servers/sip-presence/integrated</filename> directory.</para>
				</formalpara>
			</listitem>
		</itemizedlist> --><!-- uninstall --><!-- <formalpara>
			<title>Uninstalling the Mobicents XML Document Management Server</title>
			<para>How you uninstall the XDM Server depends on whether you are using the Mobicents binary distribution, or running the source distribution.</para>
		</formalpara>
		<itemizedlist>
			<listitem>
				<formalpara>
					<title>Uninstalling the XDM Server using the Mobicents Binary Distribution</title>
					<para>TBD: (Fix this with proper instructions): Using the binary release, you can uninstall the XDM Server by doing an ant undeploy on the <filename>servers/sip-presence/integrated</filename> directory.</para>
				</formalpara>
			</listitem>
			<listitem>
				<formalpara>
					<title>Uninstalling the XDM Server after Building Mobicents from Source</title>
					<para>TBD: (Fix this with proper instructions): From the source code repository, you can uninstall the XDM Server by doing a mvn clean on the <filename>/trunk/servers/sip-presence/integrated</filename> directory.</para>
				</formalpara>
			</listitem>
		</itemizedlist> --><!-- <formalpara>
			<title>Testing the Mobicents SIP Presence Server</title>
			<para>A test framework for the Mobicents SIP Presence Server is forthcoming but not available yet.</para>
		</formalpara>
	</section> -->
	<section id="sps-Functional_Architecture_of_the_SIP_Presence_Server">
		<title>Functional Architecture of the SIP Presence Server</title>
		<formalpara>
			<title>Functional Architecture of the Mobicents SIP Presence Server</title>
			<para>
				&nbsp;
			</para>
		</formalpara>
		<mediaobject id="sps-sps-SIPPresenceServer-dia-PSFunctionalArchitecture">
			<imageobject>
				<imagedata align="center" fileref="images/sps-SIPPresenceServer-dia-PSFunctionalArchitecture.jpg" format="JPG" scalefit="1" width="553"/>
			</imageobject>
			<caption>
			<para>
				Functional Diagram of the Mobicents SIP Presence Server
			</para>
			</caption>
		</mediaobject>
		<para>
			The SIP Presence Server comprises the following functional elements:
		</para>
		<variablelist id="sps-The_Functional_Elements_Which_Compose_the_Presence_Server">
			<title>The Functional Elements Which Compose the SIP Presence Server</title>
			<varlistentry>
				<term>Presence Publication Control</term>
				<listitem>
					<para>
						This functional element manages the publication of presence events, which includes not only the handling of new publications, but also the refreshing, modification or removal of, already-published information.
					</para>
					<para>
						Because the presence resource, which is also called a <quote>presentity</quote>, can have multiple publications simultaneously, such as some state published by a user agent or device, and some location data published by a Presence Network Agent (on behalf of the presentity), this element is also responsible for composing all of the different publications for the same resource.
					</para>
					<para>
						In some presence networks, it may be of interest to allow resources to have a static presence state, which is stored in the XDM Server. In cases like these, Presence Publication Control may need to interface with the XDM Server to retrieve and subscribe to (learn about changes to) that information, and use it when composing the final presence information document.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Presence Subscription Control</term>
				<listitem>
					<para>
						This functional element handles subscriptions to presence events or to the list of subscribers (watchers), for any specific resource. It is, of course, responsible for emitting notifications related to those subscriptions.
					</para>
					<para>
						Presence authorization rules, which define if a subscription is allowed or rejected and, if allowed, define which transformations to the original presence events are needed, are stored on the XDM Server by the user. Thus, Presence Subscription Control needs to retrieve and subscribe to (learn about changes to) that information.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>XDM Client Control</term>
				<listitem>
					<para>
						This last element is responsible for interfacing with the XDM Server that manages the user's XML documents, and is related to the main functions of the presence server. It's capable not only of retrieving a document (or part of one), but also of subscribing to either updates of a single, specific document, or to a full collection of documents of a specific type or application.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<formalpara>
			<title>Implementation Architecture of the Mobicents SIP Presence Server</title>
			<para>
				&nbsp;
			</para>
		</formalpara>
		<mediaobject id="sps-sps-SIPPresenceServer-dia-PSImplementation">
			<imageobject>
				<imagedata align="center" fileref="images/sps-SIPPresenceServer-dia-PSImplementation.jpg" format="JPG" scalefit="1" width="550"/>
			</imageobject>
			<caption>
			<para>
				Implementation Architecture of the Mobicents SIP Presence Server
			</para>
			</caption>
		</mediaobject>
		<para>
			The implementation of the Mobicents SIP Presence Server comprises the following functional elements:
		</para>
		<variablelist id="sps-The_Two_Services_Which_Compose_the_Presence_Server">
			<title>The Two Services Which Compose the SIP Presence Server</title>
			<varlistentry>
				<term>Presence Publication Control Service</term>
				<listitem>
					<para>
						This JAIN SLEE service includes the root Service Building Block (SBB), <literal>PresencePublicationControlSbb</literal>, which is the implementation of the abstract SIP event <literal>PublicationControlSbb</literal>. It handles publications on the "presence" event package.
					</para>
					<para>
						The <literal>PresencePublicationControlSbb</literal> provides the following capabilities:
					</para>
					<itemizedlist>
						<listitem>
							<para>
								It provides the logic to authorize a publication; however, it only authorizes <literal>PUBLISH</literal> requests when the request URI matches the PIDF document <quote>entity</quote> attribute.
							</para>
						</listitem>
						<listitem>
							<para>
								It provides JAXB unmarshellers to validate and parse the PIDF document for the abstract <literal>PublicationControlSbb</literal>.
							</para>
						</listitem>
						<listitem>
							<para>
								It demands that notifying subscribers occur through a child relation to the root SBB of the Presence Subscription Control Service.
							</para>
						</listitem>
						<listitem>
							<para>
								Finally, it also provides an <literal>SbbLocalObject</literal> interface that can be used, in JAIN SLEE child relations, to obtain the composed presence information for a specific resource.
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Presence Subscription Control Service.</term>
				<listitem>
					<para>
						This JAIN SLEE service includes the root SBB <literal>PresenceSubscriptionControlSbb</literal>, which is the implementation of the abstract SIP Event <literal>SubscriptionControlSbb</literal>. It handles subscriptions on the "presence" event package.
					</para>
					<para>
						The standout SBB logic item is the usage of presence-rules documents, obtained through the XDM Client SBB child relation, in order to authorize subscriptions and transform the content notified (TBD: feature not used yet). It also defines a child relation to the root SBB of <literal>PresencePublicationService</literal> to retrieve the composed PIDF document for the subscription's notifier.
					</para>
					<para>
						The SBB also provides an <literal>SbbLocalObject</literal> interface that can be used, in JAIN SLEE child relations, to make the presence event known to the subscribers of a specific resource.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			The implementation architecture of the SIP Presence Server also contains client-side components:
		</para>
		<variablelist>
			<varlistentry>
				<term>Presence Client SBB (TBD: not yet available)</term>
				<listitem>
					<para>
						The <literal>PresenceClientSBB</literal> is the interface to a JAIN SLEE SBB intended to be used as a client for the Mobicents SIP Presence Server (and other servers compliant with same standards), in JAIN SLEE child relations.
					</para>
					<para>
						Two implementations of this interface are provided: the <literal>InternalPresenceClientSBB</literal> that is used with applications running in the Mobicents SIP Presence Server JAIN SLEE container, and the <literal>ExternalPresenceClientSBB</literal>, used with applications running in a different JAIN SLEE container than the Mobicents SIP Presence Server.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			TBD: This documentation is originally from http://groups.google.com/group/mobicents-public/web/mobicents-sip-presence-server by Eduardo Martins, JBoss R&amp;D.
		</para>
	</section>
	
	<section id="sps-Resources_and_Further_Information_about_the_SIP_Presence_Server">
		<title>Resources and Further Information about the SIP Presence Server</title>
		<para>
			For further information on the Mobicents SIP Presence Server, see the following list of additional resources:
		</para>
		<itemizedlist id="sps-Further_Information_on_the_SIP_Presence_Server">
			<listitem>
				<para>
					How to Manage the Mobicents SIP Presence Server
				</para>
			</listitem>
			<listitem>
				<para>
					Integrating the Mobicents SIP Presence Server into Your JAIN SLEE Applications: Code Snippets for Internal Presence Client SBB Usage.
				</para>
			</listitem>
			<listitem>
				<para>
					Integrating the Mobicents SIP Presence Server into Your JAIN SLEE Applications: Code Snippets for External Presence Client SBB Usage.
				</para>
			</listitem>
			<listitem>
				<para>
					<ulink url="http://groups.google.com/group/mobicents-public/web/mobicents-sip-event-components">Mobicents Sip Event Publication and Subscription Control Components</ulink>
				</para>
			</listitem>
		</itemizedlist>
	</section>

</chapter>
	<chapter id="rls-Resource_List_Server">
	<!--  chapter id nickname: rls  --><title>Mobicents Resource List Server</title>
	<para>
		&nbsp;
	</para>
</chapter>
	<appendix id="spsug-appe-Publican-Revision_History">
	<!--  chapter id nickname: spsug  --><title>Revision History</title>
	<simpara>
		<revhistory>
			<!-- revisions must be listed in chronological order with the latest at the top -->
			<revision>
				<revnumber>2.0</revnumber>
				<date>Fri Mar 06 2009</date>
				<author>
					<firstname>Douglas</firstname>
					<surname>Silas</surname>
					<email>dhensley@redhat.com</email>
				</author>
				<revdescription>
					<simplelist>
						<member>First release of the "parameterized" and much-improved JBCP documentation.</member>
					</simplelist>
				</revdescription>
			</revision>
			<revision>
				<revnumber>1.0</revnumber>
				<date>Tue Jan 20 2009</date>
				<author>
					<firstname>Douglas</firstname>
					<surname>Silas</surname>
					<email>dhensley@redhat.com</email>
				</author>
				<revdescription>
					<simplelist>
						<member>Creation of the Mobicents SIP Presence Service User Guide separate from the Mobicents User Guide.</member>
					</simplelist>
				</revdescription>
			</revision>
		</revhistory>
	</simpara>
</appendix>
	<index/>
</book>
